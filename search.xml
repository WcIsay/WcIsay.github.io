<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实施运维相关</title>
      <link href="/2025/01/01/shi-shi-yun-wei-xiang-guan/"/>
      <url>/2025/01/01/shi-shi-yun-wei-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="centos和Ubuntu区别"><a href="#centos和Ubuntu区别" class="headerlink" title="centos和Ubuntu区别"></a>centos和Ubuntu区别</h4><table><thead><tr><th></th><th>centos</th><th>Ubuntu</th></tr></thead><tbody><tr><td><strong>源码基础与支持来源</strong></td><td>基于Red Hat Enterprise Linux（RHEL）的源代码重新编译，属于RHEL的免费社区版，由社区维护</td><td>基于Debian发行版，由Canonical公司开发和维护</td></tr><tr><td><strong>更新周期与版本策略</strong></td><td>每个版本生命周期长达10年，注重长期稳定性，适合生产环境；<br>2020年后，CentOS转向CentOS Stream（滚动更新开发分支），不再提供传统稳定版</td><td>每6个月发布一个新版本，每两年发布一个长期支持（LTS）版本，LTS版本提供5年支持<br> 更新速度快，适合需要新特性的开发和测试环境</td></tr><tr><td><strong>软件包管理与生态系统</strong></td><td>使用RPM包格式，通过<code>yum</code>或<code>dnf</code>管理软件包；<br>软件源较少，依赖EPEL（Extra Packages for Enterprise Linux）扩展仓库</td><td>使用DEB包格式，通过<code>apt</code>或<code>apt-get</code>管理软件包；<br> 软件生态更丰富，官方源和PPA（个人软件包存档）支持更多最新软件</td></tr><tr><td><strong>内核版本与硬件支持</strong></td><td>通常包含较旧的内核版本，但经过严格测试，稳定性高；<br>对传统硬件设备支持较好，适合服务器硬件</td><td>使用最新的内核版本，提供更多新功能和驱动程序支持；<br>对新型硬件设备支持较好，兼容性强</td></tr><tr><td><strong>用户界面与使用体验</strong></td><td>默认桌面环境为GNOME，用户接口传统保守；<br> 更适合服务器用户，默认安装的软件较少</td><td>默认桌面环境为GNOME，用户界面现代化且易于使用；<br>提供丰富的图形界面工具，适合新手用户</td></tr><tr><td><strong>社区支持与文档资源</strong></td><td>社区相对较小，但稳定性和可靠性得到更多关注和测试；<br>文档偏向服务器运维，适合企业用户</td><td>拥有庞大的社区和活跃的开发人员，用户可以从社区中获取帮助和支持；<br>官方Wiki和Ask Ubuntu等资源完善，适合初学者</td></tr><tr><td><strong>适用场景</strong></td><td>适用于企业级服务器、虚拟机、数据库等需要长期稳定的环境；<br>需要与RHEL兼容的场景，如商业软件认证</td><td>适用于开发环境、云计算（如AWS/Azure的默认镜像）、桌面用户；<br>需要快速获取新特性或硬件支持的场景，如Docker/Kubernetes工具链</td></tr><tr><td><strong>安全性与稳定性</strong></td><td>保守的更新策略和严格的安全审计，适合安全敏感环境；<br>继承了RHEL的安全机制和策略，安全更新及时</td><td>安全更新频率较高，能及时应对各种安全威胁；<br>社区对安全问题的响应积极，会及时发布安全补丁和解决方案</td></tr><tr><td><strong>成本效益</strong></td><td>作为RHEL的免费克隆版，为用户提供了企业级功能而无需支付订阅费用，降低了运营成本</td><td>虽然也是免费的，但更注重用户体验和新特性支持，适合需要快速迭代的项目</td></tr><tr><td><strong>总结</strong></td><td>更适合企业级服务器环境，注重稳定性和长期支持</td><td>更适合开发环境、云计算和桌面用户，注重用户体验和新特性支持</td></tr></tbody></table><h4 id="磁盘剩余量"><a href="#磁盘剩余量" class="headerlink" title="磁盘剩余量"></a>磁盘剩余量</h4><h6 id="查看磁盘剩余量"><a href="#查看磁盘剩余量" class="headerlink" title="查看磁盘剩余量"></a>查看磁盘剩余量</h6><pre class="line-numbers language-shell"><code class="language-shell">[root@wzm ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        40G  7.1G   31G  19% /devtmpfs        868M     0  868M   0% /devtmpfs           879M   16K  879M   1% /dev/shmtmpfs           879M  552K  878M   1% /runtmpfs           879M     0  879M   0% /sys/fs/cgrouptmpfs           176M     0  176M   0% /run/user/1002tmpfs           176M     0  176M   0% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="查看某个特定目录或文件夹的磁盘使用情况"><a href="#查看某个特定目录或文件夹的磁盘使用情况" class="headerlink" title="查看某个特定目录或文件夹的磁盘使用情况"></a>查看某个特定目录或文件夹的磁盘使用情况</h6><pre class="line-numbers language-shell"><code class="language-shell">[root@wzm usr]# du -sh .2.5G    .[root@wzm /]# du -sh usr2.5G    usr[root@wzm /]# du -sh home36K     home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><h6 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h6><pre class="line-numbers language-centos7.*"><code class="language-centos7.*">systemctl start firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="查看防火墙状态（只打印防火墙的运行状态）"><a href="#查看防火墙状态（只打印防火墙的运行状态）" class="headerlink" title="查看防火墙状态（只打印防火墙的运行状态）"></a>查看防火墙状态（只打印防火墙的运行状态）</h6><pre class="line-numbers language-centos7.*"><code class="language-centos7.*">firewall-cmd --state# Result：running OR not running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="查看防火墙状态（打印详细信息）"><a href="#查看防火墙状态（打印详细信息）" class="headerlink" title="查看防火墙状态（打印详细信息）"></a>查看防火墙状态（打印详细信息）</h6><pre><code>systemctl status firewalld.service</code></pre><h6 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h6><pre class="line-numbers language-centos7.*"><code class="language-centos7.*">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h6><pre class="line-numbers language-centos7.*"><code class="language-centos7.*">systemctl restart firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="开启指定端口"><a href="#开启指定端口" class="headerlink" title="开启指定端口"></a>开启指定端口</h6><pre><code>firewall-cmd --zone=public --add-port=443/tcp --permanent–zone=public 表示作用域为公共的–add-port=443/tcp 添加 tcp 协议的端口端口号为 443–permanent 永久生效，如果没有此参数，则只能维持当前 服 务生命周期内，重新启动后失效；firewall-cmd --zone=public --add-port=3306/tcp --permanent</code></pre><h6 id="查看已开放端口"><a href="#查看已开放端口" class="headerlink" title="查看已开放端口"></a>查看已开放端口</h6><pre><code>firewall-cmd --list-ports</code></pre><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>centos</p><p>Ubuntu</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h5><h5 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h5><h6 id="检查docker状态"><a href="#检查docker状态" class="headerlink" title="检查docker状态"></a>检查docker状态</h6><pre><code>systemctl status docker</code></pre><h6 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h6><pre><code>systemctl restart dockerservice docker restart</code></pre><h6 id="systemctl和service区别"><a href="#systemctl和service区别" class="headerlink" title="systemctl和service区别"></a>systemctl和service区别</h6><p>基于不同的服务管理工具</p><p><strong>systemctl</strong></p><p>基于systemd，是现代 Linux 发行版（如 CentOS 7+/RHEL 7+/Ubuntu 15.04+）的默认服务管理工具。<br>提供更强大的功能，如依赖管理、日志查看、状态监控等。</p><p><strong>service</strong></p><p>基于传统的 SysVinit 或 Upstart，是较老的服务管理工具。<br>功能相对简单，仅用于启动、停止、重启服务等基本操作。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><h3 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h3><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h5 id="centos安装MySQL"><a href="#centos安装MySQL" class="headerlink" title="centos安装MySQL"></a>centos安装MySQL</h5><p>查看是否已经安装MySQL</p><pre class="line-numbers language-bash"><code class="language-bash">rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>rpm -e 文件名</p><p>获取MySQL 5.7 Community Repository软件包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用wget下载mysql yum源</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><span class="token comment" spellcheck="true"># 由于系统未安装wget，导致命令执行失败</span>-bash: wget: <span class="token function">command</span> not found<span class="token comment" spellcheck="true"># 先通过curl下载工具包</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  2523  100  2523    0     0  11367      0 --:--:-- --:--:-- --:--:-- 11364<span class="token comment" spellcheck="true"># 安装wget</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo yum install -y wget</span><span class="token comment" spellcheck="true"># 重新# 使用wget下载mysql yum源</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装软件包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rpm -ivh mysql57-community-release-el7-8.noarch.rpm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装MySQL服务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/yum.repos.dyum -y <span class="token function">install</span> mysql-server<span class="token comment" spellcheck="true"># 如果安装的时候出现公钥尚未安装的问题</span><span class="token comment" spellcheck="true"># 需导入导入MySQL软件仓库的GPG公钥</span>rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022<span class="token comment" spellcheck="true"># 重新执行一下安装服务的命令</span>yum -y <span class="token function">install</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务、查看状态、设置开机自动启动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动服务</span>systemctl start mysqld<span class="token comment" spellcheck="true"># 查看状态</span>systemctl status mysqld<span class="token comment" spellcheck="true"># 设置开机自动启动</span>systemctl <span class="token function">enable</span> mysqld<span class="token comment" spellcheck="true"># 查看进程</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看安装后随机生成的MySQL密码(初始密码)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost yum.repos.d<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grep 'password' /var/log/mysqld.log</span>2025-04-22T13:46:00.894137Z 1 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: PW*GZfqL<span class="token comment" spellcheck="true">#4gD</span>2025-04-22T13:49:04.366669Z 3 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>2025-04-22T13:52:09.247223Z 8 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token punctuation">(</span>using password: NO<span class="token punctuation">)</span><span class="token punctuation">[</span>root@localhost yum.repos.d<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grep 'A temporary password' /var/log/mysqld.log</span>2025-04-22T13:46:00.894137Z 1 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: PW*GZfqL<span class="token comment" spellcheck="true">#4gD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录MySQL数据库</p><pre class="line-numbers language-bash"><code class="language-bash">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改密码（等级、长度）</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 执行修改验证密码强度等级的命令，将等级设置为LOWset global validate_password_policy=LOW;# 设置密码长度为6，设置密码为123456set global validate_password_length=6;ALTER USER USER() IDENTIFIED BY '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看MySQL服务器中的所有数据库</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> show databases;+--------------------+| Database           |+--------------------+| information_schema | -- 系统信息数据库| mysql              | -- MySQL 系统数据库| performance_schema | -- 性能监控数据库| sys                | -- 系统对象视图+--------------------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看一下默认的字符集编码</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> show variables like '%char%';+--------------------------------------+----------------------------+| Variable_name                        | Value                      |+--------------------------------------+----------------------------+| character_set_client                 | utf8                       || character_set_connection             | utf8                       || character_set_database               | latin1                     || character_set_filesystem             | binary                     || character_set_results                | utf8                       || character_set_server                 | latin1                     || character_set_system                 | utf8                       || character_sets_dir                   | /usr/share/mysql/charsets/ || validate_password_special_char_count | 1                          |+--------------------------------------+----------------------------+9 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置远程连接</p><pre class="line-numbers language-mysql"><code class="language-mysql">GRANT ALL PRIVILEGES ON *.* TO root@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新加载权限表</p><pre class="line-numbers language-mysql"><code class="language-mysql">FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置防火墙后 即可远程访问连接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看防火墙的状态</span>systemctl status firewalld<span class="token comment" spellcheck="true"># 开放3306端口</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>3306/tcp --permanent<span class="token comment" spellcheck="true"># 重新载入防火墙规则</span>firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录MySQL，查看MySQL安装位置</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> show variables like 'datadir';+---------------+-----------------+| Variable_name | Value           |+---------------+-----------------+| datadir       | /var/lib/mysql/ |+---------------+-----------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h5><h6 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h6><p>修改配置文件</p><p>在该MySQL配置文件中（ <code>/etc/my.cnf</code>）添加以下内容：</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token constant">log_bin</span><span class="token attr-value"><span class="token punctuation">=</span>mysql-bin          # 启用二进制日志</span><span class="token constant">server-id</span><span class="token attr-value"><span class="token punctuation">=</span>1                # 设置主库唯一ID（必须与从库不同）</span><span class="token constant">binlog_format</span><span class="token attr-value"><span class="token punctuation">=</span>ROW          # 推荐使用 ROW 格式（可选）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重启</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建复制专用用户</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 登录MySQL，执行：CREATE USER 'repl_user'@'slave_ip' IDENTIFIED BY 'your_password';GRANT REPLICATION SLAVE ON *.* TO 'repl_user'@'slave_ip';FLUSH PRIVILEGES;-- 将 slave_ip 替换为从库 IP，your_password 替换为强密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取主库二进制日志状态</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> show master status;+------------------+----------+--------------+------------------+-------------------+| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 |      154 |              |                  |                   |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)-- 记录输出结果中的 File（当前日志文件名）和 Position（日志位置），后续配置从库时需要用到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h6><p>在该MySQL配置文件中（ <code>/etc/my.cnf</code>）添加以下内容：</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token constant">server-id</span><span class="token attr-value"><span class="token punctuation">=</span>2                # 设置从库唯一ID（必须与主库不同）</span><span class="token constant">read_only</span><span class="token attr-value"><span class="token punctuation">=</span>ON               # 设置从库为只读（可选，但推荐）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置主库连接信息</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 登录从库 MySQL，执行：CHANGE MASTER TOMASTER_HOST='master_ip',    -- 主库IPMASTER_USER='repl_user',    -- 复制用户名MASTER_PASSWORD='your_password', -- 复制用户密码MASTER_LOG_FILE='mysql-bin.000001', -- 主库日志文件名（从SHOW MASTER STATUS获取）MASTER_LOG_POS=154;         -- 主库日志位置（从SHOW MASTER STATUS获取）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动复制进程</p><pre><code>START SLAVE;</code></pre><p>验证复制状态</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SHOW SLAVE STATUS\G*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 192.168.216.130                  Master_User: hostname                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: 154               Relay_Log_File: localhost-relay-bin.000002                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 154              Relay_Log_Space: 531              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 1                  Master_UUID: 34a7fa39-1f7b-11f0-94fc-000c29ac8626             Master_Info_File: /var/lib/mysql/master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set:                 Auto_Position: 0         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)-- 检查以下关键字段：-- Slave_IO_Running: Yes-- Slave_SQL_Running: Yes-- Last_IO_Error: （应为空）-- Last_SQL_Error: （应为空）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="常见问题排查"><a href="#常见问题排查" class="headerlink" title="常见问题排查"></a>常见问题排查</h6><ol><li><strong>连接失败</strong><ul><li>检查主从库网络连通性：<code>ping master_ip</code></li><li>确认防火墙开放端口：默认 3306</li></ul></li><li><strong>复制延迟</strong><ul><li>检查主库负载：<code>SHOW PROCESSLIST;</code></li><li>优化从库硬件或调整 <code>sync_binlog</code> 参数。</li></ul></li><li><strong>数据不一致</strong><ul><li>使用 <code>pt-table-checksum</code> 工具校验数据一致性。</li><li>重新同步数据（需停止复制，全量导出导入，再重新配置）。</li></ul></li></ol><h6 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h6><ul><li><strong>一主多从</strong>：<br>多个从库独立配置，指向同一个主库。</li><li><strong>链式复制</strong>：<br>A → B → C，B 既是 A 的从库，也是 C 的主库。</li><li><strong>半同步复制</strong>：<br>通过插件实现，确保至少一个从库接收数据后才提交事务。</li></ul><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><h4 id="常用的聚合函数有哪五种？"><a href="#常用的聚合函数有哪五种？" class="headerlink" title="常用的聚合函数有哪五种？"></a>常用的聚合函数有哪五种？</h4><p>count()、sum()、avg()、min()、max()</p><p>count()：求表的行数或者指定表中某个列的列值行数，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名 <span class="token comment" spellcheck="true">--得到该列值的非null值的行数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> 表名  <span class="token comment" spellcheck="true">--用于统计整个表的行数。任何行，只要有一行非null，则整个表的行数就会被统计上。全为null（不会出现该情况）则不被统计</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>sum()：返回指定数据的和，只能用于数字列，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp   <span class="token comment" spellcheck="true">--求所有salary的总和</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>max()：返回一列中的最大值，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> table_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>min()：返回一列中的最小值，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> table_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>avg()：返回数值列的平均值，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_sal <span class="token keyword">from</span> emp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li>聚合函数可用于任何有效的表达式</li><li>聚合函数会忽略空值</li><li>distinct关键字可以与聚合函数一起使用，这样可以在聚合函数的计算中排除重复项</li></ol><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><table><thead><tr><th>聚合函数</th><th>描述</th><th>实例</th><th>MySQL</th><th>SQL Server</th></tr></thead><tbody><tr><td><strong>AVG()</strong></td><td>返回某列的平均值</td><td>SELECT AVG(column_name) FROM table_name;</td><td>支持</td><td>支持</td></tr><tr><td><strong>COUNT()</strong></td><td>返回某列中的值的数量</td><td>SELECT COUNT(column_name) FROM table_name;</td><td>支持</td><td>支持 COUNT() 函数，并且提供了额外的选项，如 COUNT_BIG() 用于处理大量数据</td></tr><tr><td><strong>MAX()</strong></td><td>返回某列中的最大值</td><td>SELECT MAX(column_name) FROM table_name;</td><td>支持</td><td>支持</td></tr><tr><td><strong>MIN()</strong></td><td>返回某列中的最小值</td><td>SELECT MIN(column_name) FROM table_name;</td><td>支持</td><td>支持</td></tr><tr><td><strong>SUM()</strong></td><td>返回某列值的总和</td><td>SELECT SUM(column_name) FROM table_name;</td><td>支持</td><td>支持</td></tr><tr><td><strong>GROUP_CONCAT()</strong></td><td>在某些数据库系统（如 MySQL）中，将多个行的值组合成一个由分隔符分隔的字符串</td><td>SELECT GROUP_CONCAT(column_name SEPARATOR ‘, ‘) FROM table_name;</td><td>将多个行的值组合成一个字符串</td><td>没有直接的 GROUP_CONCAT() 函数，可以使用 FOR XML PATH 来实现类似的功能。</td></tr><tr><td><strong>STD() / STDDEV() / STDDEV_POP() / STDDEV_SAMP()</strong></td><td>返回某列的总体或样本标准偏差</td><td>SELECT STD(column_name) FROM table_name;</td><td>STD() 和 STDDEV() 函数（它们是等价的）</td><td>STDDEVP()（总体标准偏差）和 STDDEV()（样本标准偏差）</td></tr><tr><td><strong>VAR_POP() / VARIANCE_POP()</strong></td><td>返回某列的总体方差</td><td>SELECT VAR_POP(column_name) FROM table_name;</td><td>VAR_POP()</td><td>VARP()（总体方差）</td></tr><tr><td><strong>VAR_SAMP() / VARIANCE_SAMP()</strong></td><td>返回某列的样本方差</td><td>SELECT VAR_SAMP(column_name) FROM table_name</td><td>VAR_SAMP()</td><td>VAR()（样本方差）</td></tr><tr><td><strong>COVAR_POP() / COVAR_SAMP()</strong></td><td>返回两个列的协方差</td><td>SELECT COVAR_POP(column1, column2) FROM table_name;</td><td>不直接支持</td><td>支持</td></tr><tr><td><strong>CORRELATION()</strong></td><td>返回两个列之间的相关系数</td><td>SELECT CORRELATION(column1, column2) FROM table_name;</td><td>不直接支持</td><td>不直接支持</td></tr><tr><td><strong>PERCENT_RANK()</strong></td><td>返回相对于其他行的行的百分比排名</td><td>SELECT PERCENT_RANK(column_name) OVER (ORDER BY column_name) FROM table_name;</td><td>不直接支持</td><td>支持</td></tr><tr><td><strong>CUME_DIST()</strong></td><td>返回相对位置的累积分布</td><td>SELECT CUME_DIST(column_name) OVER (ORDER BY column_name) FROM table_name;</td><td>不直接支持</td><td>支持</td></tr><tr><td><strong>NTILE()</strong></td><td>将有序分区中的结果行分成指定数量的近似相等的排名组</td><td>SELECT NTILE(4) OVER (ORDER BY column_name) FROM table_name;</td><td>不直接支持</td><td>支持</td></tr><tr><td><strong>LEAD() / LAG()</strong></td><td>返回指定偏移量的行的值，用于分析数据中的趋势</td><td>SELECT LEAD(column_name, 1) OVER (ORDER BY column_name) FROM table_name;  SELECT LAG(column_name, 1) OVER (ORDER BY column_name) FROM table_name;</td><td>从8.0 版本开始支持</td><td>支持</td></tr><tr><td><strong>FIRST_VALUE() / LAST_VALUE()</strong></td><td>返回指定窗口帧中的第一个或最后一个值</td><td>SELECT FIRST_VALUE(column_name) OVER (ORDER BY column_name) FROM table_name;  SELECT LAST_VALUE(column_name) OVER (ORDER BY column_name) FROM table_name;</td><td>从 8.0 版本开始支持 FIRST_VALUE() 和 LAST_VALUE() 函数</td><td>支持</td></tr><tr><td><strong>GREATEST() / LEAST()</strong></td><td>返回一组值中的最大值或最小值</td><td>SELECT GREATEST(value1, value2, …) FROM table_name;  SELECT LEAST(value1, value2, …) FROM table_name;</td><td>支持</td><td>支持</td></tr></tbody></table><p>ORDER BY，GROUP BY</p><p>Oracle SQL语句组成：</p><table><thead><tr><th>数据定义语言（DDL）</th><th>数据操作语言（DML）</th><th>数据查询语言（DQL）</th><th>事物控制语言（TCL）</th><th>数据控制语言（DCL）</th></tr></thead><tbody><tr><td>CREATE（创建命令）、ALTER（修改）命令、DROP（删除）命令等</td><td>INSERT（插入）命令、UPDATE（更新）命令、DELETE（删除）命令、SELECT…FOR UPDATE（查询）等</td><td>基本查询语句、Order By子句、Group By子句等</td><td>COMMIT（提交）命令、SAVEPOINT（保存点）命令、ROLLBACK（回滚）命令</td><td>GRANT（授权）命令、REVOKE（撤销）命令</td></tr></tbody></table><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>检索所有列</p><p>select * from 表名</p><p>查询表的总行数，并命名为cnt</p><p>select count(*) (as) cnt from 表名（as可加可不加）</p><p>select count(主键或其他不为空的字段) (as) cnt from 表名（as可加可不加）</p><p>distinct 搜索去重：select distinct [列名1，列名2，…] from [表名]</p><h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><p>插入记录的方式汇总：</p><ul><li>普通插入（全字段）：INSERT INTO table_name VALUES (value1, value2, …)</li><li>普通插入（限定字段）：INSERT INTO table_name (column1, column2, …) VALUES (value1, value2, …)</li><li>多条一次性插入：INSERT INTO table_name (column1, column2, …) VALUES (value1_1, value1_2, …), (value2_1, value2_2, …), …</li><li>从另一个表导入：INSERT INTO table_name SELECT * FROM table_name2 [WHERE key=value]</li><li>带更新的插入：REPLACE INTO table_name VALUES (value1, value2, …) （注意这种原理是检测到主键或唯一性索引键重复就删除原记录后重新插入）</li></ul><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><p>修改记录的方式汇总：</p><ul><li>设置为新值：UPDATE table_name SET column_name=new_value [column_name2=new_value2][WHERE column_name3=value3]</li><li>根据已有值替换：UPDATE table_name SET key1=replace(key1, ‘查找内容’, ‘替换成内容’) [WHERE column_name3=value3]</li></ul><p>修改某表某字段，不允许空值</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名<span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> 修改字段名 字段数据类型 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>删除记录的方式汇总：</p><ul><li>根据条件删除：DELETE FROM tb_name [WHERE options][ [ ORDER BY fields ] LIMIT n ]</li><li>全部删除（表清空，包含自增计数器重置）：TRUNCATE tb_name</li></ul><h4 id="时间差"><a href="#时间差" class="headerlink" title="时间差"></a>时间差</h4><ul><li>TIMESTAMPDIFF(interval, time_start, time_end) 可计算 time_start-time_end 的时间差，单位以指定的 interval 为准，常用可选：<ul><li>SECOND 秒</li><li>MINUTE 分钟（返回秒数差除以60的整数部分）</li><li>HOUR 小时（返回秒数差除以3600的整数部分）</li><li>DAY 天数（返回秒数差除以3600*24的整数部分）</li><li>MONTH 月数</li><li>YEAR 年数<br>关键词：substing, concat, upper</li></ul></li></ul><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><h5 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h5><p>SUBSTRING(column_name, start, length)：这将从列的值中提取一个子字符串，从指定的起始位置开始，直到指定的长度</p><p>substring(字符串，起始位置，截取字符数）</p><h5 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h5><p>CONCAT(string1, string2, …)：这会将两个或多个字符串连接成一个字符串</p><p>concat(字符串1，字符串2，字符串3,…)</p><h5 id="大写"><a href="#大写" class="headerlink" title="大写"></a>大写</h5><p>UPPER(expression)：这会将字符串表达式转换为大写。</p><p>upper(字符串）</p><h5 id="小写"><a href="#小写" class="headerlink" title="小写"></a>小写</h5><p>LOWER(expression)：这会将字符串表达式转换为小写。</p><h4 id="SQL语句书写顺序"><a href="#SQL语句书写顺序" class="headerlink" title="SQL语句书写顺序"></a>SQL语句书写顺序</h4><p><strong>select -&gt; distinct -&gt; from -&gt; join -&gt; on-&gt; where -&gt; group by -&gt; having -&gt; order by -&gt; limit</strong></p><h4 id="SQL语句执行顺序"><a href="#SQL语句执行顺序" class="headerlink" title="SQL语句执行顺序"></a>SQL语句执行顺序</h4><p><strong>from -&gt; on -&gt; join -&gt; where -&gt; group by</strong>（开始使用select中的别名，后面的语句中都可以使用别名）<strong>-&gt; sum、count、max、min、avg -&gt; having -&gt; select -&gt; distinct -&gt; order by -&gt; limit</strong></p><p>WHERE不能接聚合函数（MAX、MIN、COUNT、SUM、AVG等）;HAVING后可以接聚合函数；</p><p>WHERE用在GROUP BY前，先过滤后分组；</p><p>HAVING用在GROUP BY之后，先分组后过滤，且使用HAVING一定要用到GRUOP BY，但用到GROUP BY 不一定有HAVING。</p><p><code>DATEDIFF()</code> 是 SQL 中的一个函数，用于计算两个日期之间的差异</p><h4 id="DISTINCT关键字"><a href="#DISTINCT关键字" class="headerlink" title="DISTINCT关键字"></a>DISTINCT关键字</h4><p>当查询某个列时，使用 <code>DISTINCT</code> 可以确保结果集中该列的值是唯一的；也可以在查询多个列时使用 <code>DISTINCT</code>，此时 <code>DISTINCT</code> 会确保这些列的组合是唯一的。</p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li><strong>性能影响</strong>：使用 <code>DISTINCT</code> 可能会对查询性能产生影响，特别是在处理大型数据集时。因为数据库需要额外的工作来识别和消除重复的行。</li><li><strong>NULL 值</strong>：<code>DISTINCT</code> 会将 <code>NULL</code> 值视为不同的值。也就是说，如果列中有多个 <code>NULL</code> 值，<code>DISTINCT</code> 会将它们全部返回。</li><li><strong>与其他 SQL 语句结合</strong>：<code>DISTINCT</code> 可以与其他 SQL 语句（如 <code>ORDER BY</code>、<code>WHERE</code> 等）结合使用，以进一步定制查询结果。</li><li><strong>不应用于聚合函数</strong>：虽然 <code>DISTINCT</code> 用于消除重复行，但它不应该与聚合函数（如 <code>SUM()</code>, <code>COUNT()</code>, <code>AVG()</code> 等）一起用于单个列，因为这会导致错误或不可预测的结果。</li></ol><h4 id="Oracle、SQL-Server、MySQL-SQL语句区别"><a href="#Oracle、SQL-Server、MySQL-SQL语句区别" class="headerlink" title="Oracle、SQL Server、MySQL SQL语句区别"></a>Oracle、SQL Server、MySQL SQL语句区别</h4><table><thead><tr><th></th><th>MySQL</th><th>SQL Server</th><th>Oracle</th></tr></thead><tbody><tr><td><strong>字符串连接</strong></td><td>使用 <code>CONCAT()</code> 函数</td><td>使用 <code>+</code> 运算符或 <code>CONCAT()</code> 函数</td><td>使用 `</td></tr><tr><td><strong>自增字段</strong></td><td>使用 <code>AUTO_INCREMENT</code> 关键字</td><td>使用 <code>IDENTITY</code> 关键字</td><td>使用序列（sequence）和触发器（trigger）</td></tr><tr><td><strong>分页查询</strong></td><td>使用 <code>LIMIT</code> 和 <code>OFFSET</code></td><td>使用 <code>OFFSET</code> 和 <code>FETCH</code></td><td>使用 <code>ROWNUM</code> 或 <code>FETCH</code> 和 <code>OFFSET</code>（在12c及更高版本中）</td></tr><tr><td><strong>日期函数</strong></td><td>使用 <code>DATE_FORMAT()</code>, <code>NOW()</code>, <code>DATEDIFF()</code> 等</td><td>使用 <code>FORMAT()</code>, <code>GETDATE()</code>, <code>DATEDIFF()</code> 等</td><td>使用 <code>TO_DATE()</code>, <code>SYSDATE</code>, <code>MONTHS_BETWEEN()</code> 等</td></tr><tr><td><strong>变量</strong></td><td>使用 <code>SET</code> 或 <code>SELECT ... INTO</code> 来定义变量</td><td>使用 <code>DECLARE</code> 来定义变量，并使用 <code>SET</code> 或 <code>SELECT</code> 来赋值</td><td>使用 <code>DECLARE</code> 来定义变量，并使用 <code>SELECT INTO</code> 来赋值</td></tr><tr><td><strong>LIMIT 返回的行数</strong></td><td>默认允许使用 <code>LIMIT</code> 返回大量行数</td><td>在较早的版本中，<code>TOP</code> 有一个默认的行数限制（如 1000 行），但在较新的版本中这个限制已被移除</td><td>没有内置的行数限制，但分页查询可能需要额外的逻辑</td></tr><tr><td><strong>数据类型</strong></td><td>使用 <code>TINYINT</code>, <code>MEDIUMINT</code>, <code>LONGTEXT</code> 等</td><td>使用 <code>TINYINT</code>, <code>INT</code>, <code>VARCHAR(MAX)</code> 等</td><td>使用 <code>NUMBER</code>, <code>VARCHAR2</code>, <code>CLOB</code></td></tr><tr><td><strong>存储过程和函数</strong></td><td>存储过程和函数的语法和调用方式在每种数据库系统中也有所不同</td><td>存储过程和函数的语法和调用方式在每种数据库系统中也有所不同</td><td>存储过程和函数的语法和调用方式在每种数据库系统中也有所不同</td></tr></tbody></table><h4 id="数据库的三个范式"><a href="#数据库的三个范式" class="headerlink" title="数据库的三个范式"></a>数据库的三个范式</h4><ol><li><strong>第一范式（1NF）</strong>：要求数据库表中的每个字段都是原子性的，即不可再分。这意味着每个字段中不能包含多个值或重复的值。如果一个字段包含多个值，应该将其拆分为多个独立的字段。第一范式确保了数据的原子性，消除了数据的重复和冗余。</li><li><strong>第二范式（2NF）</strong>：要求数据库表中的非主键字段必须完全依赖于主键。换句话说，非主键字段必须与主键直接相关，而不是间接相关。如果一个表中存在部分依赖关系，即某些字段只依赖于主键的一部分，就需要将这些字段拆分到另一个表中，以确保每个表都只包含相关的数据。第二范式消除了部分依赖，进一步减少了数据的冗余性。</li><li><strong>第三范式（3NF）</strong>：要求数据库表中的非主键字段之间不能存在传递依赖关系。传递依赖是指非主键字段依赖于其他非主键字段。如果存在传递依赖，就需要将这些字段拆分到另一个表中，以消除冗余和数据不一致性。第三范式消除了传递依赖，使得数据结构更加清晰和稳定。</li></ol><p>这三个范式的设计目的是确保数据库的简洁性、结构明晰性以及数据的一致性。遵循这些范式可以提高数据库的性能和可维护性，减少数据的冗余和不一致性。然而，需要注意的是，在某些特定场景下，为了优化查询性能或其他原因，可能会选择违反这些范式。因此，在实际应用中，需要根据具体业务需求和数据特点来权衡和选择合适的设计方案。</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="典型目录结构"><a href="#典型目录结构" class="headerlink" title="典型目录结构"></a>典型目录结构</h4><pre><code>├── bin/               # 可执行文件目录，存放启动和关闭脚本│   ├── startup.sh     # 启动脚本（Linux）│   ├── shutdown.sh    # 关闭脚本（Linux）│   ├── catalina.sh    # 核心脚本（Linux）│   ├── startup.bat    # 启动脚本（Windows）│   ├── shutdown.bat   # 关闭脚本（Windows）│   ├── catalina.bat   # 核心脚本（Windows）│   └── ...├── conf/              # 配置文件目录，存放所有配置文件，server.xml 是核心配置文件│   ├── server.xml     # 主配置文件│   ├── web.xml        # 全局 Web 应用配置文件│   ├── context.xml    # 上下文配置文件│   └── tomcat-users.xml # 用户认证配置文件├── lib/               # 库文件目录，存放 Tomcat 运行所需的 JAR 包│   ├── *.jar          # Tomcat 运行所需的 JAR 包├── logs/              # 日志文件目录，存放日志文件，包括访问日志和错误日志│   ├── catalina.out   # 主日志文件│   ├── localhost_access_log.&lt;date&gt;.txt│   └── ...├── temp/              # 临时文件目录，通常无需手动管理├── webapps/           # Web 应用部署目录，支持文件夹、WAR 包或 JAR 包形式│   ├── ROOT/          # 默认 Web 应用│   ├── docs/          # 文档应用│   ├── examples/      # 示例应用│   └── ...└── work/              # 工作目录（存放编译后的 JSP 文件，清理后可强制重新编译）</code></pre><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>下载要求版本的Tomcat</p></li><li><p>创建目标目录，在目标目录下进行解压操作</p><pre><code>tar -zavf apache-tomcat-8.5.93.tar.gz</code></pre></li><li><p>进入bin目录，启动Tomcat</p><pre><code>cd /usr/local/tomcat/apache-tomcat-8.5.93/bin./startup.sh</code></pre></li><li><p>查看Tomcat是否启动</p><pre><code>ps -ef | grep tomcat</code></pre></li></ol><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><ol><li><p>进入Tomcat的bin文件夹</p><pre><code>cd /apache-tomcat/bin</code></pre></li><li><p>关闭Tomcat服务器</p><pre><code>./shutdown.sh</code></pre></li><li><p>查看Tomcat是否已关闭</p><pre><code>ps -ef | grep tomcat</code></pre></li><li><p>直接杀死Tomcat进程</p><pre><code>kill 端口号</code></pre></li><li><p>查看Tomcat是否已关闭</p><pre><code>ps -ef | grep tomcat</code></pre></li><li><p>启动Tomcat</p><pre><code>./startup.sh</code></pre></li><li><p>进入日志文件夹，打开服务日志</p><pre><code>cd logstail -f ../logs/catalina.out</code></pre></li></ol><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="典型目录结构-1"><a href="#典型目录结构-1" class="headerlink" title="典型目录结构"></a>典型目录结构</h4><pre><code>├── conf/            # 存放配置文件，主配置文件为 nginx.conf│   ├── nginx.conf    # 主配置文件│   ├── conf.d/       # 子配置文件目录（如站点配置）│   └── mime.types    # MIME 类型映射文件├── html/            # 默认静态文件目录，可自定义为其他路径│   ├── 50x.html     # 错误页面│   └── index.html   # 默认首页├── logs/            # 存放日志文件，可自定义路径│   ├── access.log   # 访问日志│   └── error.log    # 错误日志├── sbin/            # 存放 Nginx 可执行文件，如 nginx│   └── nginx        # Nginx 主程序└── temp/            # 存放临时文件，通常无需手动管理</code></pre><p>自定义目录</p><ul><li>静态资源目录：<code>/var/www/html</code></li><li>日志目录：<code>/var/log/nginx</code></li><li>SSL 证书目录：<code>/etc/nginx/ssl</code></li></ul><h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><pre><code>sudo nginx</code></pre><h4 id="验证nginx配置"><a href="#验证nginx配置" class="headerlink" title="验证nginx配置"></a>验证nginx配置</h4><pre><code># Linuxnginx -t# 如果配置正确，会输出 syntax is ok 和 test is successful# Windowsnginx.exe -t</code></pre><h4 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h4><pre><code># 如果 Nginx 已经在运行，可以重新加载配置# Linuxsudo nginx -s reload# Windowsnginx.exe -s reload</code></pre><h4 id="nginx配置示例"><a href="#nginx配置示例" class="headerlink" title="nginx配置示例"></a>nginx配置示例</h4><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true"># 全局配置</span><span class="token keyword">user</span> nginx<span class="token punctuation">;</span><span class="token keyword">worker_processes</span> auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># worker_processes  1;  # 设置 Nginx 的工作进程数，通常设置为 CPU 核心数</span><span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token keyword">pid</span> <span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token punctuation">.</span><span class="token keyword">pid</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 用于配置Nginx服务器的事件模型，例如工作进程的并发连接数等。</span><span class="token keyword">events</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true"># 设置每个worker进程的最大连接数，它决定了Nginx的并发能力</span>    <span class="token comment" spellcheck="true"># 通常情况下，我们会把 worker 进程数会设置成系统的 cpu 核数(这里要看大家的机器配置而定)，这样 worker 进程会分配到各个 cpu 核心上去执行请求处理，真正做到并行处理</span>    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 每个工作进程的最大连接数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># HTTP 配置块</span><span class="token comment" spellcheck="true"># 用于配置HTTP请求的处理，包括HTTP服务器、反向代理、缓存、负载均衡等。</span><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token keyword">include</span>       mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 加载 MIME 类型文件，用于正确识别文件类型（如 .html、.jpg）</span>    <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 默认文件类型，当无法识别文件类型时使用</span>    <span class="token keyword">sendfile</span>        on<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 启用高效文件传输，减少 CPU 使用</span>    <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 长连接超时时间，单位为秒</span>    <span class="token comment" spellcheck="true"># 定义一个服务器块</span>    <span class="token comment" spellcheck="true"># 用于配置虚拟主机，包括监听的端口、域名、SSL证书等。</span>    <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 监听端口</span>        <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 服务器名称（域名），可设置为 localhost 或具体域名</span>        <span class="token comment" spellcheck="true"># 根目录配置</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 静态文件根目录</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 默认首页文件</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 反向代理示例（可选）</span>        <span class="token keyword">location</span> <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 将 /api/ 请求转发到后端服务</span>            <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 保留原始主机头</span>            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 传递客户端真实 IP</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 错误页面配置（可选）</span>        <span class="token comment" spellcheck="true"># 指定404出错的错误页面</span>        <span class="token keyword">error_page</span> <span class="token number">404</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 匹配url /，会在html目录下，访问index.html或index.htm文件</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>            <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 定义一个服务器块（HTTPS，监听 443 端口）</span>    <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span>       <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 启用 SSL</span>        <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># SSL 证书和私钥文件路径</span>        <span class="token keyword">ssl_certificate</span>      <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">ssl</span><span class="token operator">/</span><span class="token keyword">server</span><span class="token punctuation">.</span>crt<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 替换为你的证书路径</span>        <span class="token keyword">ssl_certificate_key</span>  <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">ssl</span><span class="token operator">/</span><span class="token keyword">server</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 替换为你的私钥路径</span>        <span class="token comment" spellcheck="true"># 推荐的 SSL 配置（增强安全性）</span>        <span class="token keyword">ssl_protocols</span>       TLSv1<span class="token number">.2</span> TLSv1<span class="token number">.3</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 禁用低版本协议</span>        <span class="token keyword">ssl_ciphers</span>         HIGH<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 使用强加密套件</span>        <span class="token keyword">ssl_prefer_server_ciphers</span> on<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 根目录配置</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 反向代理示例（可选）</span>        <span class="token keyword">location</span> <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 错误页面配置（可选）</span>        <span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>            <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="Nginx-无法启动"><a href="#Nginx-无法启动" class="headerlink" title="Nginx 无法启动"></a><strong>Nginx 无法启动</strong></h5><ul><li>检查配置文件语法是否正确：<code>nginx -t</code></li><li>检查端口是否被占用：<code>netstat -tuln | grep 80</code></li></ul><h5 id="静态文件无法访问"><a href="#静态文件无法访问" class="headerlink" title="静态文件无法访问"></a><strong>静态文件无法访问</strong></h5><ul><li>确保 <code>root</code> 指定的目录存在，并且文件权限正确。</li></ul><h5 id="反向代理无效"><a href="#反向代理无效" class="headerlink" title="反向代理无效"></a><strong>反向代理无效</strong></h5><ul><li>确保后端服务正在运行，并且 <code>proxy_pass</code> 的地址正确。</li></ul><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制</title>
      <link href="/2024/04/23/mysql-zhu-cong-fu-zhi/"/>
      <url>/2024/04/23/mysql-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<p>以下是 MySQL 主从复制（Master-Slave Replication）的配置步骤，分为 <strong>主库配置</strong> 和 <strong>从库配置</strong> 两部分：</p><h5 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h5><h6 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h6><p>1、修改配置文件</p><p>在该MySQL配置文件中（ <code>/etc/my.cnf</code>）添加以下内容：</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token constant">log_bin</span><span class="token attr-value"><span class="token punctuation">=</span>mysql-bin          # 启用二进制日志</span><span class="token constant">server-id</span><span class="token attr-value"><span class="token punctuation">=</span>1                # 设置主库唯一ID（必须与从库不同）</span><span class="token constant">binlog_format</span><span class="token attr-value"><span class="token punctuation">=</span>ROW          # 推荐使用 ROW 格式（可选）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、重启</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、创建复制专用用户</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 登录MySQL，执行：CREATE USER 'repl_user'@'slave_ip' IDENTIFIED BY 'your_password';GRANT REPLICATION SLAVE ON *.* TO 'repl_user'@'slave_ip';FLUSH PRIVILEGES;-- 将 slave_ip 替换为从库 IP，your_password 替换为强密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、获取主库二进制日志状态</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> show master status;+------------------+----------+--------------+------------------+-------------------+| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 |      154 |              |                  |                   |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)-- 记录输出结果中的 File（当前日志文件名）和 Position（日志位置），后续配置从库时需要用到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h6><p>1、在该MySQL配置文件中（ <code>/etc/my.cnf</code>）添加以下内容：</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysqld]</span><span class="token constant">server-id</span><span class="token attr-value"><span class="token punctuation">=</span>2                # 设置从库唯一ID（必须与主库不同）</span><span class="token constant">read_only</span><span class="token attr-value"><span class="token punctuation">=</span>ON               # 设置从库为只读（可选，但推荐）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、重启</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、配置主库连接信息</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 登录从库 MySQL，执行：CHANGE MASTER TOMASTER_HOST='master_ip',    -- 主库IPMASTER_USER='repl_user',    -- 复制用户名MASTER_PASSWORD='your_password', -- 复制用户密码MASTER_LOG_FILE='mysql-bin.000001', -- 主库日志文件名（从SHOW MASTER STATUS获取）MASTER_LOG_POS=154;         -- 主库日志位置（从SHOW MASTER STATUS获取）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、启动复制进程</p><pre><code>START SLAVE;</code></pre><p>5、验证复制状态</p><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SHOW SLAVE STATUS\G*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: master_ip                  Master_User: hostname                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: 154               Relay_Log_File: localhost-relay-bin.000002                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 154              Relay_Log_Space: 531              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 1                  Master_UUID: 34a7fa39-1f7b-11f0-94fc-000c29ac8626             Master_Info_File: /var/lib/mysql/master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set:                 Auto_Position: 0         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)-- 检查以下关键字段：-- Slave_IO_Running: Yes-- Slave_SQL_Running: Yes-- Last_IO_Error: （应为空）-- Last_SQL_Error: （应为空）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><p>主库</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 创建新数据库CREATE DATABASE test_db;-- 切换到新数据库USE test_db;-- 创建表并插入数据CREATE TABLE test_table (id INT);INSERT INTO test_table VALUES (1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从库</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 查看数据库是否同步SHOW DATABASES;-- 查看表是否同步SHOW TABLES FROM test_db;-- 查看数据是否同步SELECT * FROM test_db.test_table;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="常见问题排查"><a href="#常见问题排查" class="headerlink" title="常见问题排查"></a>常见问题排查</h5><ol><li><strong>连接失败</strong><ul><li><strong>检查</strong>主从库网络连通性：<code>ping master_ip</code></li><li>确认防火墙开放端口：默认 3306</li></ul></li><li><strong>复制延迟</strong><ul><li>检查主库负载：<code>SHOW PROCESSLIST;</code></li><li>优化从库硬件或调整 <code>sync_binlog</code> 参数。</li></ul></li><li><strong>数据不一致</strong><ul><li>使用 <code>pt-table-checksum</code> 工具校验数据一致性。</li><li>重新同步数据（需停止复制，全量导出导入，再重新配置）。</li></ul></li></ol><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><ul><li><strong>一主多从</strong>：<br>多个从库独立配置，指向同一个主库。</li><li><strong>链式复制</strong>：<br>A → B → C，B 既是 A 的从库，也是 C 的主库。</li><li><strong>半同步复制</strong>：<br>通过插件实现，确保至少一个从库接收数据后才提交事务。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python将Excel数据写入数据库实例</title>
      <link href="/2024/03/13/python-jiang-excel-shu-ju-xie-ru-shu-ju-ku-shi-li/"/>
      <url>/2024/03/13/python-jiang-excel-shu-ju-xie-ru-shu-ju-ku-shi-li/</url>
      
        <content type="html"><![CDATA[<h4 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h4><p>工作中，对于重复性很高技术性不那么强的工作，通过更简单的方式去实现能减轻工作的压力提高自己的工作效率。对着Excel将里面的数据录入数据库也就是这样一个场景，50条摸摸鱼就录了，1000条呢？简化重复写入的操作，一定程度提高录入数据的准确率。以下就是使用Python将Excel数据写入数据库的简单案例。</p><h4 id="二、涉及技术"><a href="#二、涉及技术" class="headerlink" title="二、涉及技术"></a>二、涉及技术</h4><ul><li><strong>Excel数据读取</strong></li><li><strong>数据库连接</strong></li><li><strong>数据写入</strong></li><li><strong>事务处理</strong></li><li><strong>关联表处理</strong></li></ul><h4 id="三、实现步骤"><a href="#三、实现步骤" class="headerlink" title="三、实现步骤"></a>三、实现步骤</h4><h5 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h5><p><code>mysql-connector-python</code> 是 MySQL 官方提供的 Python 连接器和驱动。</p><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> openpyxl mysql-connector-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-2-Excel数据"><a href="#3-2-Excel数据" class="headerlink" title="3.2 Excel数据"></a>3.2 Excel数据</h5><p>假设有一个Excel文件<code>data.xlsx</code>（emmm…都不用假设了，就是汇总表格数据，需要的保留，不需要的删除，场景假设就是医生的诊断单），其中包含患者、医生和病因信息，需要分别写入到<code>patients</code>、<code>doctors</code>和<code>causes</code>三个表中。</p><p><a href="/2024/03/13/python-jiang-excel-shu-ju-xie-ru-shu-ju-ku-shi-li/test.xlsx">待处理的Excel文件</a></p><h5 id="3-3-数据库结构"><a href="#3-3-数据库结构" class="headerlink" title="3.3 数据库结构"></a>3.3 数据库结构</h5><ul><li><p><code>Patients</code>表：包含患者ID和姓名。</p><pre class="line-numbers language-mysql"><code class="language-mysql">DROP TABLE IF EXISTS `Patients`;CREATE TABLE `Patients`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 115 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Doctors</code> 表：包含医生ID和姓名。</p><pre class="line-numbers language-mysql"><code class="language-mysql">DROP TABLE IF EXISTS `Doctors`;CREATE TABLE `Doctors`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 92 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Diagnoses</code>表：包含就诊记录ID、患者ID、医生ID和病情描述，其中患者ID和医生ID是外键。</p><pre class="line-numbers language-mysql"><code class="language-mysql">DROP TABLE IF EXISTS `Diagnoses`;CREATE TABLE `Diagnoses`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `patient_id` int(11) NOT NULL,  `doctor_id` int(11) NOT NULL,  `cause` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,  PRIMARY KEY (`id`) USING BTREE,  INDEX `patient_id`(`patient_id`) USING BTREE,  INDEX `doctor_id`(`doctor_id`) USING BTREE,  CONSTRAINT `Diagnoses_ibfk_1` FOREIGN KEY (`patient_id`) REFERENCES `Patients` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,  CONSTRAINT `Diagnoses_ibfk_2` FOREIGN KEY (`doctor_id`) REFERENCES `Doctors` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT) ENGINE = InnoDB AUTO_INCREMENT = 57 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://www.wangziming.asia/2024/03/13/python-jiang-excel-shu-ju-xie-ru-shu-ju-ku-shi-li/QQ%E6%88%AA%E5%9B%BE20240314171129.png" alt="医生表、患者表、就诊记录表联系"></p><h5 id="3-4-Python代码实现"><a href="#3-4-Python代码实现" class="headerlink" title="3.4 Python代码实现"></a>3.4 Python代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> mysql<span class="token punctuation">.</span>connector  <span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook  <span class="token comment" spellcheck="true"># Excel文件路径</span>file_path <span class="token operator">=</span> r<span class="token string">'C:\Users\30735\Desktop\test.xlsx'</span><span class="token comment" spellcheck="true"># 数据库配置</span>db_config <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span>      <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span>      <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>      <span class="token string">'database'</span><span class="token punctuation">:</span> <span class="token string">'database'</span><span class="token punctuation">,</span>      <span class="token string">'raise_on_warnings'</span><span class="token punctuation">:</span> <span class="token boolean">True</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 初始化连接和游标</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cnx <span class="token operator">=</span> mysql<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token operator">**</span>db_config<span class="token punctuation">)</span>    cursor <span class="token operator">=</span> cnx<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Error connecting to MySQL database: {e}"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 准备三个表的SQL插入语句模板和查询语句模板</span>insert_patient_query <span class="token operator">=</span> <span class="token string">"INSERT INTO Patients (name) VALUES (%s)"</span>insert_doctor_query <span class="token operator">=</span> <span class="token string">"INSERT INTO Doctors (name) VALUES (%s)"</span>select_doctor_query <span class="token operator">=</span> <span class="token string">"SELECT * FROM Doctors WHERE name = %s"</span>insert_cause_query <span class="token operator">=</span> <span class="token string">"INSERT INTO Diagnoses (patient_id, doctor_id, cause) VALUES (%s, %s, %s)"</span><span class="token comment" spellcheck="true"># 初始化字典以存储已插入患者和医生的ID</span>inserted_patients <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>inserted_doctors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 加载Excel工作簿</span>    workbook <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span>file_path<span class="token punctuation">)</span>    sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>active    <span class="token comment" spellcheck="true"># 跳过第一行（表头），从第二行开始读取数据</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> sheet<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> values_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        patient_name <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        doctor_name <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        cause_description <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 检查患者是否已经插入，如果没有则插入并获取ID</span>        <span class="token keyword">if</span> patient_name <span class="token operator">not</span> <span class="token keyword">in</span> inserted_patients<span class="token punctuation">:</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>insert_patient_query<span class="token punctuation">,</span> <span class="token punctuation">(</span>patient_name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            inserted_id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>lastrowid            inserted_patients<span class="token punctuation">[</span>patient_name<span class="token punctuation">]</span> <span class="token operator">=</span> inserted_id        patient_id <span class="token operator">=</span> inserted_patients<span class="token punctuation">[</span>patient_name<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 检查医生是否已经插入</span>        <span class="token keyword">if</span> doctor_name <span class="token operator">not</span> <span class="token keyword">in</span> inserted_doctors<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 检查医生是否已存在于数据库中</span>            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>select_doctor_query<span class="token punctuation">,</span> <span class="token punctuation">(</span>doctor_name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            doctor <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> doctor <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果不存在，则插入医生并获取ID</span>                cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>insert_doctor_query<span class="token punctuation">,</span> <span class="token punctuation">(</span>doctor_name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                inserted_id <span class="token operator">=</span> cursor<span class="token punctuation">.</span>lastrowid            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果已存在，则获取医生的ID</span>                inserted_id <span class="token operator">=</span> doctor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 假设医生ID是查询结果的第一列</span>            inserted_doctors<span class="token punctuation">[</span>doctor_name<span class="token punctuation">]</span> <span class="token operator">=</span> inserted_id        doctor_id <span class="token operator">=</span> inserted_doctors<span class="token punctuation">[</span>doctor_name<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 插入就诊记录，使用患者和医生的ID</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>insert_cause_query<span class="token punctuation">,</span> <span class="token punctuation">(</span>patient_id<span class="token punctuation">,</span> doctor_id<span class="token punctuation">,</span> cause_description<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 提交事务</span>    cnx<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">if</span> cnx<span class="token punctuation">.</span>is_connected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        cnx<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 如果发生错误，回滚事务</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Error inserting data into the database: {e}"</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cnx<span class="token punctuation">.</span>is_connected<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        cnx<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Database connection closed."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据已成功写入数据库。"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、延伸"><a href="#四、延伸" class="headerlink" title="四、延伸"></a>四、延伸</h4><p>使用<code>mysql-connector-python</code>还可以查询MySQL数据库的很多其他信息。</p><ol><li><h5 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h5><p>使用用户名、密码、主机名和端口号建立到 MySQL 服务器的连接。</p><p>支持 SSL 连接，增强数据传输的安全性。</p><p>可以配置连接池，用于管理多个数据库连接，提高性能。</p></li><li><h5 id="执行-SQL-查询"><a href="#执行-SQL-查询" class="headerlink" title="执行 SQL 查询"></a>执行 SQL 查询</h5><p>执行 SELECT 语句，从数据库中检索数据。</p><p>执行 INSERT、UPDATE 和 DELETE 语句，修改数据库中的数据。</p><p>执行 DDL（数据定义语言）语句，如 CREATE、ALTER 和 DROP，用于管理数据库结构。</p></li><li><h5 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h5><p>支持 ACID 属性的事务，确保数据的完整性和一致性。</p><p>提供提交（commit）和回滚（rollback）操作，以控制事务的边界和结果。</p></li><li><h5 id="参数化查询"><a href="#参数化查询" class="headerlink" title="参数化查询"></a>参数化查询</h5><p>允许使用参数化查询，防止 SQL 注入攻击，提高查询的安全性。</p><p>参数化查询也使得代码更加清晰和易于维护。</p></li><li><h5 id="结果集处理"><a href="#结果集处理" class="headerlink" title="结果集处理"></a>结果集处理</h5><p>将查询结果作为字典或元组的列表返回，方便 Python 代码处理。</p><p>提供游标（cursor）对象，用于遍历和访问查询结果。</p></li><li><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><p>提供异常处理机制，当连接失败、查询错误或发生其他数据库相关问题时，可以捕获和处理这些异常。</p></li><li><h5 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h5><p>支持批量插入、更新或删除操作，提高数据处理效率。</p></li><li><h5 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h5><p>调用 MySQL 中的存储过程和函数，执行预定义的数据库操作。</p></li><li><h5 id="复制和负载均衡"><a href="#复制和负载均衡" class="headerlink" title="复制和负载均衡"></a>复制和负载均衡</h5><p>支持连接到 MySQL 复制集，实现读写分离读取和负载均衡。</p></li><li><h5 id="二进制数据处理"><a href="#二进制数据处理" class="headerlink" title="二进制数据处理"></a>二进制数据处理</h5><p>可以处理二进制数据，如 BLOB 和 TEXT 类型字段，允许在 Python 和 MySQL 之间传输二进制数据。</p></li><li><h5 id="字符集和编码"><a href="#字符集和编码" class="headerlink" title="字符集和编码"></a>字符集和编码</h5><p>支持设置连接和查询的字符集和编码，确保字符数据的正确传输和处理。</p></li><li><h5 id="其他高级功能"><a href="#其他高级功能" class="headerlink" title="其他高级功能"></a>其他高级功能</h5><p>提供对预处理语句的支持，用于优化重复执行的查询。</p><p>支持多种认证插件，如 Unix 套接字认证和 PAM 认证。</p><p>允许配置连接的超时时间和重试策略。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 实用DOMO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache相关</title>
      <link href="/2024/01/16/apache-xiang-guan/"/>
      <url>/2024/01/16/apache-xiang-guan/</url>
      
        <content type="html"><![CDATA[<p>Apache版本更新</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 服务器相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Windows </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实现列表分页、查询等功能</title>
      <link href="/2024/01/08/javascript-shi-xian-lie-biao-fen-ye-cha-xun-deng-gong-neng/"/>
      <url>/2024/01/08/javascript-shi-xian-lie-biao-fen-ye-cha-xun-deng-gong-neng/</url>
      
        <content type="html"><![CDATA[<h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><p>​    某一天，后端开发同事说：这个列表的数据不是特别多，我一次传给你，你自己处理一下这些数据，OK不OK？</p><h4 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h4><p>​    项目经理：项目这里要做个列表页，不单独开发接口了，实现一下查询的功能就可以了。</p><p>​    大头答：有获取数据的接口吗？模糊查询还是精确查询？查询条件是多选还是单选？用UI组件库吗？</p><p>​    项目经理答：数据纯手工造，模糊查询嘛，一个或多个查询都可以晒！不合适。</p><p>​        ······</p><p>​    细想片刻，我擦，还有分页要做？</p><p>​    捋捋思路，不用Element-UI组件库是吧？要实现列表页，主要就是实现分页以及查询噶，根据页码、是否查询来动态渲染页面数据，应该不是太难，好，开干！</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>​    列表分页倒是没有什么太大的问题，根据设置的当前页大小拆分这个数组返回相对应的数组就行，引入查询之后呢？区别无非在于拆分的这个数组有所变化对吧，这是根据查询生成的一个新的数组，其他按部就班的来就没问题了。</p><p>​    参考Element-UI列表和分页的实现，通常，我们是将当前页、页面大小、查询条件一起返回后端，页面响应对应的数据就完成了。因此，这里我们可以封装一个方法就能实现这一需求，对吧！</p><h4 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h4><h5 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h5><p>​    分页一般来说，主要包括：上下页切换的功能、点击页码跳转某一页的功能以及直达某一页的功能，那目标就是正确的显示当前页的数据以及分页中的页码及其他数据，然后再注意一些其他的细节就可以了。</p><ol><li><p>创建对应的html结构</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list_page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_prev<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_prev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_next<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gopage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gopage<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gopage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list_page_span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>GO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为啥没有页码？查询和不查询的页码肯定是分情况讨论的啊，所以页码由我们动态生成DOM去实现；</p></li><li><p>生成页码及表格页面</p><ol><li><p>确定分页大小、总页数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 页面大小为15条，获取总页数</span>    window<span class="token punctuation">.</span>totalPage <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>pageData<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取对应分页上的数据</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 先获取当前页第一条数据和最后一条数据角码，进而分割字符串</span>    <span class="token keyword">var</span> startIndex <span class="token operator">=</span> <span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> endIndex <span class="token operator">=</span> startIndex <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tableData <span class="token operator">=</span> pageData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>页面数据渲染</p><p>​        渲染数据的时候，咱是否应该处理掉当前页面上的表格数据，因此，首先清空表格里面原有的数据；之后给定表头的列表数据；然后我们就来循环渲染上面我们获取到的<code>tableData</code>；因为我这里的需求是表格是斑马条纹的样式，因此这里做了一个判断，进而得到奇数和偶数两个不同属性的数据；最后填充表格数据，就完成了表格对应的页面。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token comment" spellcheck="true">// 先获取当前页第一条数据和最后一条数据角码，进而分割字符串</span>    <span class="token keyword">const</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"txl_table"</span><span class="token punctuation">)</span>    table<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">var</span> tableHtml <span class="token operator">=</span> <span class="token string">'&lt;tr>&lt;th scope="col" style="width: 348px;">商品名称&lt;/th>&lt;th scope="col" style="width: 287px;">所属品类&lt;/th>&lt;th scope="col" style="width: 465px;">订购电话&lt;/th>&lt;/tr>'</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tableData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      tableHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;tr>'</span> <span class="token operator">+</span> <span class="token string">'&lt;td align="center">'</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>unitName <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td align = "center" > '</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>jobIDName <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td align="center">'</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>telephone <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span> <span class="token string">'&lt;/tr>'</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      tableHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;tr class="even">'</span> <span class="token operator">+</span> <span class="token string">'&lt;td align="center">'</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>unitName <span class="token operator">+</span>      <span class="token string">'&lt;/td>&lt;td align = "center" > '</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>jobIDName <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td align="center">'</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>telephone <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span> <span class="token string">'&lt;/tr>'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    table<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> tableHtml    <span class="token comment" spellcheck="true">// 给页面直达的span标签赋值，也相当于是显示第几页</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'gopage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> pageIndex<span class="token operator">&lt;</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分页数据的渲染</p><p>​    这里特别说明一下分页数据的渲染：假定我们有200条数据，分页大小为15，那么我们就有14页的数据，页码都要展示出来吗？那肯定是不需要的，展示五个页码就比较合适（如果对当前页页码有样式处理，奇数最为合适），当前页居中，对吧？如果是第九页，那我们就展示第七页、第八页、第九页、第十页、第十一页；第一页的话，就是一到五；第二页的话，也是一到五，因为没有-1页；第三页，也是一到五，且刚好居中满足我们的需求；以此类推，到第十二页的时候，对应的就是十到十四页对吧；再然后呢？为满足咱们的需求，第十三页和第十四页是不是应该只能往前推了呢，即十到十四。因此这里就是三种情况了，因此在渲染分页页面的时候就需要进行相应的一个判断；不过这里还有一种情况我们没有考虑到，如果一共就一页或者两页数据呢？这里即又是一种新的情况。</p><p>​    因此，实现分页的时候，我们还要考虑四种情况。</p><ol><li><p>调用同一个方法，因此，每次渲染对应数据的时候，我们应先清空之前的页面数据；</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 查找页面上所有ID为“makeSpan”的span标签，然后删除</span>  <span class="token keyword">var</span> spanElements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'#makeSpan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>spanElements<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    spanElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>      element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  pageIndexHtmls <span class="token operator">=</span> <span class="token string">''</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断并创建对应的分页页面结构</p><p>​    判断的时候，我们始终会对是否为当前页进行一个判断，为减少重复代码，这里封装了一个公共的方法去判断是否为当前页，是，我们就加上“active”的属性值，否，则不添加；</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">// 是否为当前页</span>  <span class="token keyword">function</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> pageIndexHtml <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> pageIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pageIndexHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;span class="active" id="makeSpan" onclick="makePage(checkInputValues(), '</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">')">'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'&lt;/span>'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        pageIndexHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;span id="makeSpan" onclick="makePage(checkInputValues(), '</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">')">'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'&lt;/span>'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> pageIndexHtml<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">if</span><span class="token punctuation">(</span>totalPage <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>totalPage <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">>=</span> pageIndex <span class="token operator">&amp;&amp;</span> pageIndex <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> pageIndex <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> pageIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pageIndexHtmls <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pageIndex <span class="token operator">></span> totalPage <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> pageIndex <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> totalPage <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> totalPage<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pageIndexHtmls <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pageIndex <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pageIndexHtmls <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> totalPage<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pageIndexHtmls <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 在id为page_prev的span标签后添加这段html结构，即切换至上一页的按钮后添加</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'page_prev'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'afterend'</span><span class="token punctuation">,</span> pageIndexHtmls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li><li><p>上一页及下一页</p><p>​    通过监听上一页和下一页是否有点击事件来实现，如果当前页不是第一页，则上一页即自减；反之，下一页也亦是如此；</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'page_prev'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前页码</span>      <span class="token keyword">let</span> currentPage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'gopage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentPage<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// makePage()是创建页面的方法，checkInputValues()是判断是否是查询的方法，后面会提到</span>            <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentPage<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'page_next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> currentPage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'gopage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage <span class="token operator">&lt;</span> totalPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentPage<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentPage<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>点击页码跳转</p><p>​    因为我们在创建页面结构的时候，给每一个页面加上了对应的点击事件，即<code>onclick="makePage(checkInputValues(), ' + x + ')"</code>，这里就不用进行其他的数据处理了；</p></li><li><p>页码直达</p><p>​    在前面，我们给定了一个跳转的标签，即<code>&lt;span class="list_page_span"&gt;GO&lt;/span&gt;</code>，在这里，我们定义一个方法，获取元素的值，从而创建对应的页面，即实现跳转直达某页的需求；这里还可以进行一些细节上的处理，比如说，用户没有输入的时候，点击这里，即仍是刷新当前页的数据，就应该禁用，在这段js代码中加上一个判断就可以了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">goToPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        toPage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'gopage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>toPage<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>​    在前面的分析中，我们可以知道，查询的数组就是未查询的分页数组过滤之后的新数组，之后创建页面的逻辑也是一样，因此在整体封装创建页面的方法之前，我们可以添加一个字段去判断是否进行了查询，是，就用新数组，否，就用原始的数组。</p><ol><li><p>创建三个查询条件的输入框，即查询搜索的页面结构；</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span>  <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tablelists topfrom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>商品名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pa_l_10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SearchKey<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>unitName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>所属品类： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pa_l_10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SearchKey<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jobIDName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>订购电话： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pa_l_10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SearchKey<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>telephone<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn_submit<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>makePage(checkInputValues(), 1)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p></li><li><p>是否查询</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 获取输入框是否有值，有的话，就返回true</span> <span class="token keyword">function</span> <span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> unitName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'unitName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>     <span class="token keyword">const</span> jobIDName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'jobIDName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>     <span class="token keyword">const</span> telephone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'telephone'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>     <span class="token keyword">var</span> hasValues <span class="token operator">=</span> <span class="token punctuation">[</span>unitName<span class="token punctuation">,</span> jobIDName<span class="token punctuation">,</span> telephone<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> hasValues<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模糊查询（过滤数组）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> unitName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'unitName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">const</span> jobIDName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'jobIDName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">const</span> telephone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'telephone'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>unitName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>unitName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>jobIDName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>jobIDName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>              item<span class="token punctuation">.</span>telephone<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>telephone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 赋值给表格数据</span>    pageData <span class="token operator">=</span> result<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><h5 id="搜索优化"><a href="#搜索优化" class="headerlink" title="搜索优化"></a>搜索优化</h5><p>​    当前实现的搜索功能是通过传入参数点击搜索实现的，单点击页面好像有点呆，想高级一点，或者说至少加上回车键入搜索吧，不难，事件传入方法即可实现；模拟远程检索（假装数据的动态的），可以吗？动态监听输入框是否有变化，调用setTimeout()方法，设置0.5秒后，触发创建页面的方法就可以了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 动态监听查询条件的变化</span>    <span class="token keyword">function</span> <span class="token function">handleValueChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">makePage</span><span class="token punctuation">(</span><span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'unitName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> handleValueChange<span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'jobIDName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> handleValueChange<span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'telephone'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> handleValueChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h5><pre class="line-numbers language-javascript"><code class="language-javascript">     <span class="token comment" spellcheck="true">// 表格样式</span>     <span class="token operator">&lt;</span>style<span class="token operator">></span>         <span class="token punctuation">.</span>txl_table<span class="token punctuation">{</span> margin<span class="token operator">-</span>top<span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token punctuation">.</span>txl_table th<span class="token punctuation">{</span> background<span class="token punctuation">:</span>#015fa7<span class="token punctuation">;</span> height<span class="token punctuation">:</span>40px<span class="token punctuation">;</span> text<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span> color<span class="token punctuation">:</span>#fff<span class="token punctuation">;</span> font<span class="token operator">-</span>weight<span class="token punctuation">:</span>normal<span class="token punctuation">;</span> line<span class="token operator">-</span>height<span class="token punctuation">:</span>40px<span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token punctuation">.</span>txl_table td<span class="token punctuation">{</span> height<span class="token punctuation">:</span>40px<span class="token punctuation">;</span> line<span class="token operator">-</span>height<span class="token punctuation">:</span>40px<span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token punctuation">.</span>txl_table tr<span class="token punctuation">.</span>odd<span class="token punctuation">{</span> background<span class="token punctuation">:</span>#eef6fc<span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token punctuation">.</span>txl_table tr<span class="token punctuation">.</span>even<span class="token punctuation">{</span> background<span class="token punctuation">:</span>#eef6fc<span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token punctuation">.</span>txl_table tr td<span class="token punctuation">{</span> padding<span class="token operator">-</span>left<span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token punctuation">.</span>txl_table tr<span class="token punctuation">:</span>hover<span class="token punctuation">{</span> background<span class="token punctuation">:</span>#e1effa<span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>     <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment" spellcheck="true">// 判断是否为当前页，同时创建分页的页面数据</span>         <span class="token keyword">function</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">var</span> pageIndexHtml <span class="token operator">=</span> <span class="token string">''</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> pageIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 pageIndexHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;span class="active" id="makeSpan" onclick="makePage(checkInputValues(), '</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">')">'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'&lt;/span>'</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 pageIndexHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;span id="makeSpan" onclick="makePage(checkInputValues(), '</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">')">'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'&lt;/span>'</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">return</span> pageIndexHtml<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>     <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment" spellcheck="true">// 创建页面</span>       <span class="token keyword">function</span> <span class="token function">makePage</span><span class="token punctuation">(</span>isSearch<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 初始化将要渲染的页面数据</span>           pageData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true">// 判断是否在进行查询，根据情况为页面原始数据赋值</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>isSearch<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">const</span> unitName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'unitName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>               <span class="token keyword">const</span> jobIDName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'jobIDName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>               <span class="token keyword">const</span> telephone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'telephone'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>               <span class="token keyword">const</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                   <span class="token keyword">return</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>unitName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>unitName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>jobIDName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>jobIDName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                       item<span class="token punctuation">.</span>telephone<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>telephone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               pageData <span class="token operator">=</span> result           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>               pageData <span class="token operator">=</span> array           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 创建分页</span>           window<span class="token punctuation">.</span>totalPage <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>pageData<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">15</span><span class="token punctuation">)</span>           <span class="token keyword">var</span> spanElements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'#makeSpan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>spanElements<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               spanElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           pageIndexHtmls <span class="token operator">=</span> <span class="token string">''</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>totalPage <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>totalPage <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">>=</span> pageIndex <span class="token operator">&amp;&amp;</span> pageIndex <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> pageIndex <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> pageIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 pageIndexHtmls <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span>               <span class="token punctuation">}</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>pageIndex <span class="token operator">></span> totalPage <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> pageIndex <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> totalPage <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> totalPage<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 pageIndexHtmls <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span>               <span class="token punctuation">}</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>pageIndex <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 pageIndexHtmls <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span>               <span class="token punctuation">}</span>             <span class="token punctuation">}</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> totalPage<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               pageIndexHtmls <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">generatePageIndexHtml</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> pageIndex<span class="token punctuation">)</span>             <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'page_prev'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'afterend'</span><span class="token punctuation">,</span> pageIndexHtmls<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 创建列表数据</span>           <span class="token keyword">var</span> startIndex <span class="token operator">=</span> <span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> endIndex <span class="token operator">=</span> startIndex <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> tableData <span class="token operator">=</span> pageData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span>           <span class="token keyword">const</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"txl_table"</span><span class="token punctuation">)</span>           table<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span>           <span class="token keyword">var</span> tableHtml <span class="token operator">=</span> <span class="token string">'&lt;tr>&lt;th scope="col" style="width: 348px;">商品名称&lt;/th>&lt;th scope="col" style="width: 287px;">所属品类&lt;/th>&lt;th scope="col" style="width: 465px;">订购电话&lt;/th>&lt;/tr>'</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tableData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   tableHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;tr>'</span> <span class="token operator">+</span> <span class="token string">'&lt;td align="center">'</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>unitName <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td align = "center" > '</span> <span class="token operator">+</span>                       tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>jobIDName <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td align="center">'</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>telephone <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span> <span class="token string">'&lt;/tr>'</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                   tableHtml <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;tr class="even">'</span> <span class="token operator">+</span> <span class="token string">'&lt;td align="center">'</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>unitName <span class="token operator">+</span>                       <span class="token string">'&lt;/td>&lt;td align = "center" > '</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>jobIDName <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td align="center">'</span> <span class="token operator">+</span> tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                       <span class="token punctuation">.</span>telephone <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span> <span class="token operator">+</span> <span class="token string">'&lt;/tr>'</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           table<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> tableHtml           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'gopage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> pageIndex       <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment" spellcheck="true">// 判断用户是否在进行查询的方法</span>       <span class="token keyword">function</span> <span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">const</span> unitName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'unitName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>           <span class="token keyword">const</span> jobIDName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'jobIDName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>           <span class="token keyword">const</span> telephone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'telephone'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>           <span class="token keyword">var</span> hasValues <span class="token operator">=</span> <span class="token punctuation">[</span>unitName<span class="token punctuation">,</span> jobIDName<span class="token punctuation">,</span> telephone<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> hasValues<span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>     <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment" spellcheck="true">// 初始化页面</span>       <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>           <span class="token punctuation">{</span> unitName<span class="token punctuation">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> jobIDName<span class="token punctuation">:</span> <span class="token string">'水果'</span><span class="token punctuation">,</span> telephone<span class="token punctuation">:</span> <span class="token string">'028-12345678'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>              ······         <span class="token punctuation">{</span> unitName<span class="token punctuation">:</span> <span class="token string">'电烤箱'</span><span class="token punctuation">,</span> jobIDName<span class="token punctuation">:</span> <span class="token string">'家电'</span><span class="token punctuation">,</span> telephone<span class="token punctuation">:</span> <span class="token string">'028-87654321'</span> <span class="token punctuation">}</span>       <span class="token punctuation">]</span>       <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment" spellcheck="true">// 监听上一页</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'page_prev'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">let</span> currentPage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'gopage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               currentPage<span class="token operator">--</span><span class="token punctuation">;</span>               <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentPage<span class="token punctuation">)</span>             <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 监听下一页</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'page_next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">let</span> currentPage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'gopage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage <span class="token operator">&lt;</span> totalPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>               currentPage<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentPage<span class="token punctuation">)</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 直达目标页方法实现</span>       <span class="token keyword">function</span> <span class="token function">goToPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           toPage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'gopage'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>           <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token function">checkInputValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>toPage<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   ​</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日电影推荐</title>
      <link href="/2023/12/29/mei-ri-dian-ying-tui-jian/"/>
      <url>/2023/12/29/mei-ri-dian-ying-tui-jian/</url>
      
        <content type="html"><![CDATA[<hr><hr><link rel="stylesheet" href="https://cdn.staticfile.org/element-ui/2.15.10/theme-chalk/index.css"><script src="https://cdn.staticfile.org/vue/2.7.10/vue.min.js"></script><script src="https://cdn.staticfile.org/element-ui/2.15.10/index.js"></script><script src="https://cdn.staticfile.org/axios/1.5.0/axios.min.js"></script>  <script type="text/javascript">  axios.get('https://api.oioweb.cn/api/common/OneFilm')    .then(res => {      console.log(res)      if(res.data.code == 200) {        const result = res.data.result        console.log(result)        document.getElementById('articleContent').innerHTML = ""      } else {        console.log()      }      })      .catch(error => {        console.error(error);    });  </script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js处理时间相关的问题</title>
      <link href="/2023/12/11/js-chu-li-shi-jian-xiang-guan-de-wen-ti/"/>
      <url>/2023/12/11/js-chu-li-shi-jian-xiang-guan-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="一、获取今天之前所有近半年的1号和15号的时间，用于折线图的展示"><a href="#一、获取今天之前所有近半年的1号和15号的时间，用于折线图的展示" class="headerlink" title="一、获取今天之前所有近半年的1号和15号的时间，用于折线图的展示"></a>一、获取今天之前所有近半年的1号和15号的时间，用于折线图的展示</h4><p>假如今天是2023年12月11号，获取今天之前所有近半年的1号和15号的时间，即：2023-12-01，2023-11-15，2023-11-01…</p><p>最直接的思路，获取到当前时间，去遍历今年以及去年的时间，考虑到如果时间早于6月15日时，今年满足条件的1号以及15号不及12个，以此取前一年满足条件的时间，而今年晚于6月15日后（包括6月15日），获取到今年的所有满足条件的时间后，截取数组即可。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 当前日期</span>    <span class="token keyword">const</span> nowDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前年份</span>    <span class="token keyword">const</span> thisYear <span class="token operator">=</span> nowDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前月份</span>    <span class="token keyword">const</span> month <span class="token operator">=</span> nowDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前日</span>    <span class="token keyword">const</span> day <span class="token operator">=</span> nowDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前年所有1号及15号（不包括超过当前日的）</span>    <span class="token keyword">let</span> thisYearDate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去年</span>    <span class="token keyword">let</span> lastYearDate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 目标日期数组</span>    <span class="token keyword">let</span> yearDate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> month<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>thisYear<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">&lt;=</span> nowDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thisYearDate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> date15 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>thisYear<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>date15 <span class="token operator">&lt;=</span> nowDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            date15<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thisYearDate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date15<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thisYearDate<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>thisYear <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">&lt;=</span> nowDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>                date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lastYearDate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">const</span> date15 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>thisYear <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>date15 <span class="token operator">&lt;=</span> nowDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>                date15<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lastYearDate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date15<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        yearDate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>lastYearDate<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastYearDate<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">-</span> thisYearDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> lastYearDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>thisYearDate<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        yearDate <span class="token operator">=</span> thisYearDate<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>thisYearDate<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">,</span> thisYearDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yearDate<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ['2023-06-15', '2023-07-01', '2023-07-15', '2023-08-01', '2023-08-15', '2023-09-01', '2023-09-15', '2023-10-01', '2023-10-15', '2023-11-01', '2023-11-15', '2023-12-01']</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="为什么const-month-now-getMonth-1-这里的当前月份需要加一？"><a href="#为什么const-month-now-getMonth-1-这里的当前月份需要加一？" class="headerlink" title="为什么const month = now.getMonth() + 1;这里的当前月份需要加一？"></a>为什么<code>const month = now.getMonth() + 1;</code>这里的当前月份需要加一？</h6><p>因为 JavaScript 中的 Date 对象中的月份是从 0 开始计数的，即 0 表示一月，1 表示二月，以此类推，11 表示十二月。</p><hr><h6 id="date-toISOString-的作用？"><a href="#date-toISOString-的作用？" class="headerlink" title="date.toISOString()的作用？"></a><code>date.toISOString()</code>的作用？</h6><p>不使用这个方法的话，直接打印new Date()，结果是<code>Mon Dec 11 2023 15:42:28 GMT+0800 (中国标准时间)</code> ；使用toISOString() 方法返回一个符合 ISO 8601 标准的字符串表示日期和时间的格式，它将日期和时间转换为 UTC 时间，并以以下格式返回字符串：<code>YYYY-MM-DDTHH:mm:ss.sssZ</code> ，此时我们得到结果<code>'2023-12-11T07:44:12.173Z'</code> ，后截取字符串，得到<code>YYYY-MM-DD</code> 格式的时间。</p><h4 id="二、那假定是柱状图呢？"><a href="#二、那假定是柱状图呢？" class="headerlink" title="二、那假定是柱状图呢？"></a>二、那假定是柱状图呢？</h4><p>柱状图往往是一个区间，因此还需对以上代码及数据进行一定的处理（此前获得的12个数据显然是不够，因此还需多取一个，此处我们依旧以取前不去后的原则去取）。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 当前日期</span>    <span class="token keyword">const</span> nowDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前年份</span>    <span class="token keyword">const</span> thisYear <span class="token operator">=</span> nowDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前月份</span>    <span class="token keyword">const</span> month <span class="token operator">=</span> nowDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前日</span>    <span class="token keyword">const</span> day <span class="token operator">=</span> nowDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前年所有1号及15号（不包括超过当前日的）</span>    <span class="token keyword">let</span> thisYearDate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去年</span>    <span class="token keyword">let</span> lastYearDate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 目标日期数组</span>    <span class="token keyword">let</span> yearDate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> month<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>thisYear<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">&lt;=</span> nowDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thisYearDate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> date15 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>thisYear<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>date15 <span class="token operator">&lt;=</span> nowDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            date15<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thisYearDate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date15<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thisYearDate<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>thisYear <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">&lt;=</span> nowDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>                date<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lastYearDate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">const</span> date15 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>thisYear <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>date15 <span class="token operator">&lt;=</span>                nowDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>                date15<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lastYearDate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date15<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        yearDate <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>lastYearDate<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastYearDate<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">13</span> <span class="token operator">-</span> thisYearDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> lastYearDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>            thisYearDate        <span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        yearDate <span class="token operator">=</span> thisYearDate<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>thisYearDate<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">13</span><span class="token punctuation">,</span> thisYearDate<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yearDate<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ['2023-06-15', '2023-07-01', '2023-07-15', '2023-08-01', '2023-08-15', '2023-09-01', '2023-09-15', '2023-10-01','2023-10-15', '2023-11-01', '2023-11-15', '2023-12-01', '2023-12-15']</span>    <span class="token keyword">const</span> formattedDates <span class="token operator">=</span> yearDate<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> yearDate<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">——</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>yearDate<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formattedDates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ['2023-06-15——2023-07-01', '2023-07-01——2023-07-15', '2023-07-15——2023-08-01', '2023-08-01——2023-08-15','2023-08-15——2023-09-01', '2023-09-01——2023-09-15', '2023-09-15——2023-10-01', '2023-10-01——2023-10-15','2023-10-15——2023-11-01', '2023-11-01——2023-11-15', '2023-11-15——2023-12-01', '2023-12-01——2023-12-15', '2023-12-15']</span>    <span class="token comment" spellcheck="true">// 去掉最后一个不符合格式要求的，即'2023-12-15'，方法处理下来，这是一个单独的</span>    formattedDates<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formattedDates<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ['2023-06-15——2023-07-01', '2023-07-01——2023-07-15', '2023-07-15——2023-08-01', '2023-08-01——2023-08-15','2023-08-15——2023-09-01', '2023-09-01——2023-09-15', '2023-09-15——2023-10-01', '2023-10-01——2023-10-15','2023-10-15——2023-11-01', '2023-11-01——2023-11-15', '2023-11-15——2023-12-01', '2023-12-01——2023-12-15']</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、优化上述代码"><a href="#三、优化上述代码" class="headerlink" title="三、优化上述代码"></a>三、优化上述代码</h4><p>可对相关重复的代码进行方法的封装；采用<strong>Moment.js</strong>、<strong>Day.js</strong>等第三方库，更便于我们数据的处理。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2023/12/05/docker-chang-yong-ming-ling/"/>
      <url>/2023/12/05/docker-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h5 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h5><ul><li><p>查看docker版本信息：<strong>docker version</strong></p></li><li><p>显示docker系统信息：<strong>docker info</strong></p></li><li><p>命令帮助：<strong>–help</strong></p></li></ul><h5 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h5><ul><li><p>列出本地主机上的镜像：<strong>docker images</strong></p><ul><li><p>列出所有镜像：<strong>docker images -a</strong></p></li><li><p>只显示镜像id：<strong>docker images -q</strong></p></li><li><p>显示镜像摘要信息：docker images -digests</p></li></ul></li><li><p>搜索镜像：<strong>docker search</strong></p></li><li><p>下载远程仓库的镜像：<strong>docker pull</strong></p><ul><li>指定版本下载（MySQL5.7仓库要有的）：<strong>docker pull mysql:5.7</strong></li></ul></li><li><p>删除镜像：<strong>docker rmi</strong></p><ul><li><p>删除全部：<strong>docker rmi $(docker images -aq)</strong></p></li><li><p>删除多个：<strong>docker rmi 镜像名：版本号 镜像名：版本号</strong></p></li><li><p>根据镜像id删除：<strong>docker rmi 镜像ID</strong></p></li></ul></li><li><p>打包镜像：<strong>docker save -o 压缩文件名 镜像ID：版本号</strong></p></li><li><p>加载镜像文件：<strong>docker load -i 压缩文件名</strong></p></li></ul><h5 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h5><ul><li><p>新建容器并运行：<strong>docker run -参数 镜像名 /bin/bash</strong></p><ul><li><p>–name给容器一个指定的名字</p></li><li><p>-i 交互模式运行容器</p></li><li><p>-t 给容器分配一个终端</p></li><li><p>-P 随机端口</p></li><li><p>-p 指定端口</p></li><li><p>-d 允许后台运行</p></li><li><p>-rm 用完这个容器就删除</p></li><li><p>数据卷</p><ul><li><p>-v 容器目录：匿名挂载</p></li><li><p>-v 数据卷名：容器目录 具名挂载</p></li><li><p>-v 宿主机目录：容器目录 指定目录挂载</p></li><li><p>容器B挂载到数据卷容器A上：<strong>docker run -it –name 容器B名 –volumes-from 容器A名 镜像：版本号</strong></p></li></ul></li></ul></li><li><p>退出容器</p><ul><li><p>停止退出：<strong>exit</strong></p></li><li><p>不停止退出：<strong>Ctrl + Q + P</strong></p></li></ul></li><li><p>启动容器：<strong>docker start 容器ID/容器名</strong></p></li><li><p>重启容器：<strong>docker restart 容器ID/容器名</strong></p></li><li><p>停止容器：<strong>docker stop 容器ID/容器名</strong></p></li><li><p>强制停止容器：<strong>docker kill 容器ID/容器名</strong></p></li><li><p>删除容器</p><ul><li><p>删除指定容器：<strong>docker rm 容器ID</strong></p></li><li><p>删除所有容器：</p><ul><li><p><strong>docker rm -f $(docker ps -aq)</strong></p></li><li><p><strong>docker ps -aq | xargs docker rm</strong></p></li></ul></li><li><p>列出所有运行容器：docker ps -参数</p><ul><li><p>-a 显示正在运行容器 + 历史运行过的容器</p></li><li><p>-l 显示最近创建的容器</p></li><li><p>-n=? 显示最近n个创建的容器</p></li><li><p>-q 只显示容器编号</p></li></ul></li><li><p>查看容器状态：<strong>docker status 容器ID</strong></p></li><li><p>设置启动docker时也启动容器：<strong>docker update 容器名 –restart=always</strong></p></li></ul></li></ul><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><ul><li><p>提交容器，成为镜像：<strong>docker commit -a=“作者名” -m=“描述” 容器ID 自己命名容器</strong></p></li><li><p>根据自己写的脚本文件生产镜像：<strong>docker build -f 哪个目录下的哪个文件 -t 名字:版本号</strong></p><ul><li><strong>docker build -f ./tomcatfile -t liang_centos:1</strong></li></ul></li><li><p>常用关键字</p><ul><li><p><strong>FROM</strong> 基础镜像</p></li><li><p><strong>MAINTAINER</strong> 作者信息</p></li><li><p><strong>RUN</strong> 构建容器时执行什么命令</p></li><li><p><strong>CMD</strong> 启动容器时默认命令，执行命令后有参数会追加</p></li><li><p><strong>COPY</strong> 复制文件到镜像中</p></li><li><p><strong>ADD</strong> 复制文件到镜像中，如果是压缩包会自动解压</p></li><li><p><strong>ENV</strong> 配置环境变量</p></li><li><p><strong>VOLUME</strong> 挂载数据卷</p></li><li><p><strong>EXPOSE</strong> 开放端口</p></li><li><p><strong>WORKDIR</strong> 工作目录（容器一级目录）</p></li></ul></li></ul><h5 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h5><ul><li><p>查看网关：<strong>ip addr</strong></p></li><li><p>服务名访问：<strong>–link(docker run -d –name tomcat1 –link tomcat2 tomcat</strong> 然后tomcat1就可以ping通tomcat2原理是配置了hosts文件)</p></li><li><p>查看网络：<strong>docker network ls</strong></p></li><li><p>查看网络具体配置：<strong>docker network inspect 网络ID</strong></p></li><li><p>创建网卡mynet：<strong>docker network create –driver bridge –subnet 192.168.0.0/16 –gatway 192.168.0.1 mynet</strong></p><ul><li><p>–driver bridge：网络模式选择默认的桥接</p></li><li><p>–subnet：子网范围</p></li><li><p>–gatway：网关地址</p></li><li><p>mynet：网络名</p></li></ul></li><li><p>网络连通：<strong>docker network connent mynet tomcat1</strong>(将tomcat1容器连通到mynet网络)</p></li></ul><h5 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h5><ul><li><p>查看版本：<strong>docker-compose-version</strong></p></li><li><p>启动应用：<strong>docker-compose up -d</strong>(带上-d就是后台启动)</p></li><li><p>关闭应用：<strong>docker-compose down 或 Ctrl + C</strong></p></li></ul><h5 id="docker-swarm"><a href="#docker-swarm" class="headerlink" title="docker swarm"></a>docker swarm</h5><ul><li><p>初始化：<strong>docker swarm init</strong></p><ul><li>把172.18.80.80这个地址的docker设为swarm的leader(事务节点)：<strong>docker swarm init –advertise -addr 172.18.80.80</strong></li></ul></li><li><p>查看节点：<strong>docker node ls</strong></p></li><li><p>生成事物节点：<strong>docker swarm join-token manager</strong></p></li><li><p>生成工作节点：<strong>docker swarm join-tokrn worker</strong></p></li><li><p>离开所在的swarm：<strong>docker swarm leave</strong></p></li><li><p>服务</p><ul><li><p>创建服务：<strong>docker service create -p 8080:80 –name my-nginx nginx</strong>（与run指令相似）</p></li><li><p>查看服务：<strong>docker service ls</strong></p></li><li><p>查看详细服务：<strong>docker service ps 服务名</strong></p></li><li><p>动态扩展容：<strong>docker service update–replicas 数量 服务名</strong></p></li><li><p>动态扩缩容：<strong>docker service scale 服务名=数量</strong></p></li></ul><h5 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h5></li><li><p>查看日志：<strong>docker logs -tf -tail 数字 容器ID</strong></p><ul><li><p>-t 显示时间戳</p></li><li><p>-f 打印最新日志</p></li><li><p>–tail 数字 打印多少条</p></li></ul></li><li><p>查看容器中运行进程信息：<strong>docker top 容器ID</strong></p></li><li><p>查看容器元数据：<strong>docker inspect 容器ID</strong></p></li><li><p>进入正在运行的容器</p><ul><li><p><strong>docker attach 容器ID</strong></p></li><li><p><strong>docker exec -it 容器ID /bin/bash</strong></p></li></ul></li><li><p>把容器中的文件拷贝到宿主机中：<strong>docker cp 容器ID: /容器文件位置 /宿主机目的位置</strong></p></li><li><p>开机时启动xx容器： <strong>docker update xx容器名 –restart=always</strong></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器相关指令等总结</title>
      <link href="/2023/11/24/fu-wu-qi-xiang-guan-zhi-ling-deng-zong-jie/"/>
      <url>/2023/11/24/fu-wu-qi-xiang-guan-zhi-ling-deng-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="磁盘剩余量"><a href="#磁盘剩余量" class="headerlink" title="磁盘剩余量"></a>磁盘剩余量</h4><h6 id="查看磁盘剩余量"><a href="#查看磁盘剩余量" class="headerlink" title="查看磁盘剩余量"></a>查看磁盘剩余量</h6><pre class="line-numbers language-shell"><code class="language-shell">[root@wzm ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        40G  7.1G   31G  19% /devtmpfs        868M     0  868M   0% /devtmpfs           879M   16K  879M   1% /dev/shmtmpfs           879M  552K  878M   1% /runtmpfs           879M     0  879M   0% /sys/fs/cgrouptmpfs           176M     0  176M   0% /run/user/1002tmpfs           176M     0  176M   0% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="查看某个特定目录或文件夹的磁盘使用情况"><a href="#查看某个特定目录或文件夹的磁盘使用情况" class="headerlink" title="查看某个特定目录或文件夹的磁盘使用情况"></a>查看某个特定目录或文件夹的磁盘使用情况</h6><pre class="line-numbers language-shell"><code class="language-shell">[root@wzm usr]# du -sh .2.5G    .[root@wzm /]# du -sh usr2.5G    usr[root@wzm /]# du -sh home36K     home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><h6 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h6><pre class="line-numbers language-centos7.*"><code class="language-centos7.*">systemctl start firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="查看防火墙状态（只打印防火墙的运行状态）"><a href="#查看防火墙状态（只打印防火墙的运行状态）" class="headerlink" title="查看防火墙状态（只打印防火墙的运行状态）"></a>查看防火墙状态（只打印防火墙的运行状态）</h6><pre class="line-numbers language-centos7.*"><code class="language-centos7.*">firewall-cmd --state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>Result：running OR not running</code></pre><h6 id="查看防火墙状态（打印详细信息）"><a href="#查看防火墙状态（打印详细信息）" class="headerlink" title="查看防火墙状态（打印详细信息）"></a>查看防火墙状态（打印详细信息）</h6><pre><code>systemctl status firewalld.service</code></pre><h6 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h6><pre class="line-numbers language-centos7.*"><code class="language-centos7.*">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h6><pre class="line-numbers language-centos7.*"><code class="language-centos7.*">systemctl restart firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="开启指定端口"><a href="#开启指定端口" class="headerlink" title="开启指定端口"></a>开启指定端口</h6><pre><code>firewall-cmd --zone=public --add-port=443/tcp --permanent–zone=public 表示作用域为公共的–add-port=443/tcp 添加 tcp 协议的端口端口号为 443–permanent 永久生效，如果没有此参数，则只能维持当前 服 务生命周期内，重新启动后失效；</code></pre><h6 id="查看已开放端口"><a href="#查看已开放端口" class="headerlink" title="查看已开放端口"></a>查看已开放端口</h6><pre><code>firewall-cmd --list-ports</code></pre><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>查看是否已经安装MySQL</p><pre><code>rpm -qa | grep mysql</code></pre><p>rpm -e 文件名</p><p>下载官方MySQL包</p><pre><code>wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</code></pre><p>安装MySQL包</p><pre><code>yum -y install mysql57-community-release-el7-10.noarch.rpm</code></pre><p>安装MySQL</p><pre><code>yum -y install mysql-community-server</code></pre><pre><code>yum -y install mysql-community-server --nogpgcheck</code></pre><p>启动MySQL服务</p><pre><code>systemctl start mysqld.service</code></pre><p>查看MySQL运行状态</p><pre><code>service mysqld status</code></pre><p>查看初始密码</p><pre><code>grep 'password' /var/log/mysqld.log</code></pre><p>进入数据库</p><pre><code>mysql -u root -p</code></pre><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><ol><li><p>下载要求版本的Tomcat</p></li><li><p>创建目标目录，在目标目录下进行解压操作</p><pre><code>tar -zavf apache-tomcat-8.5.93.tar.gz</code></pre></li><li><p>进入bin目录，启动Tomcat</p><pre><code>cd /usr/local/tomcat/apache-tomcat-8.5.93/bin./startup.sh</code></pre></li><li><p>查看Tomcat是否启动</p><pre><code>ps -ef |grep tomcat</code></pre></li></ol><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><ol><li><p>进入Tomcat的bin文件夹</p><pre><code>cd /apache-tomcat/bin</code></pre></li><li><p>关闭Tomcat服务器</p><pre><code>./shutdown.sh</code></pre></li><li><p>查看Tomcat是否已关闭</p><pre><code>ps -ef | grep tomcat</code></pre></li><li><p>直接杀死Tomcat进程</p><pre><code>kill 端口号</code></pre></li><li><p>查看Tomcat是否已关闭</p><pre><code>ps -ef | grep tomcat</code></pre></li><li><p>启动Tomcat</p><pre><code>./startup.sh</code></pre></li><li><p>进入日志文件夹，打开服务日志</p><pre><code>cd logstail -f ../logs/catalina.out</code></pre></li></ol><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>HTTP和反向代理web服务器</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">user</span> nginx<span class="token punctuation">;</span><span class="token keyword">worker_processes</span> auto<span class="token punctuation">;</span><span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token keyword">pid</span> <span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token punctuation">.</span><span class="token keyword">pid</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>modules<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 用于配置Nginx服务器的事件模型，例如工作进程的并发连接数等。 </span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 设置每个worker进程的最大连接数，它决定了Nginx的并发能力</span>    <span class="token comment" spellcheck="true"># 通常情况下，我们会把 worker 进程数会设置成系统的 cpu 核数(这里要看大家的机器配置而定)，这样 worker 进程会分配到各个 cpu 核心上去执行请求处理，真正做到并行处理</span>    <span class="token keyword">worker_connections</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 用于配置HTTP请求的处理，包括HTTP服务器、反向代理、缓存、负载均衡等。</span><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token keyword">log_format</span>  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>    <span class="token keyword">access_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>    <span class="token keyword">sendfile</span>            on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nopush</span>          on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nodelay</span>         on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 设置每个worker进程的最大连接数，它决定了Nginx的并发能力</span>    <span class="token comment" spellcheck="true"># 目的是保持长连接，减少创建连接过程给系统带来的性能损耗</span>    <span class="token keyword">keepalive_timeout</span>   <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token keyword">types_hash_max_size</span> <span class="token number">4096</span><span class="token punctuation">;</span>    <span class="token keyword">include</span>             <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span>        application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 用于配置虚拟主机，包括监听的端口、域名、SSL证书等。</span>    <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 监听80端口</span>        <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">listen</span>       <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span>  _<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># </span>        <span class="token keyword">root</span>         <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Load configuration files for the default server block.</span>        <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>default<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 指定404出错的错误页面</span>        <span class="token keyword">error_page</span> <span class="token number">404</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 匹配url /，会在html目录下，访问index.html或index.htm文件</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 指定500 502 503 504出错的错误页面</span>        <span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx.conf文件中，常见配置块</p><p>全局块</p><table><thead><tr><th>全局块</th><th>包含了全局配置信息，例如工作进程数、用户和组、错误日志等。</th></tr></thead><tbody><tr><td>user</td><td>指定Nginx进程运行的用户和用户组</td></tr><tr><td>worker_processes</td><td>指定Nginx启动的工作进程数</td></tr><tr><td>error_log</td><td>指定错误日志的路径和级别</td></tr><tr><td>pid</td><td>指定Nginx主进程的PID文件路径</td></tr><tr><td>worker_rlimit_nofile</td><td>设置每个工作进程可以打开的最大文件描述符数</td></tr><tr><td>events</td><td>用于配置服务器的事件模型，包括连接数、并发数等参数</td></tr><tr><td>http</td><td>包含HTTP请求的处理配置，包括HTTP服务器、反向代理、缓存、负载均衡等</td></tr></tbody></table><p>event块</p><table><thead><tr><th>worker_connections</th><th>设置每个工作进程可同时处理的最大连接数。</th></tr></thead><tbody><tr><td>use</td><td>指定事件模型，可以是 <code>epoll</code> 、 <code>kqueue</code> 、 <code>eventport</code> 、 <code>/dev/poll</code> 、 <code>select</code> 等。</td></tr><tr><td>multi_accept</td><td>设置是否允许一个工作进程同时接受多个新连接</td></tr><tr><td>accept_mutex</td><td>设置是否启用互斥锁来限制一个工作进程同时接受新连接的数量</td></tr><tr><td>accept_mutex_delay</td><td>设置互斥锁延迟的时间，以降低锁竞争</td></tr></tbody></table><p>http块</p><p>server块</p><p>注意事项</p><p>每个指令块以分号(;)结尾</p><p>反向代理</p><p>负载均衡</p><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git相关</title>
      <link href="/2023/11/14/git-xiang-guan/"/>
      <url>/2023/11/14/git-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h5 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h5><p>在github或者gitee新建一个仓库<br>进入项目目录<br>初始化（生成.git目录）：git init<br>连接远程仓库：git remote add origin <a href="http://github.com/仓库地址" target="_blank" rel="noopener">http://github.com/仓库地址</a><br>所有文件加入暂存区：git add .<br>提交到本地仓库: git commit -m ‘备注’<br>推送到远程仓库：git push orgin 分支名或强制推送git push orgin 分支名 –force</p><h5 id="连接到仓库、同步到本地"><a href="#连接到仓库、同步到本地" class="headerlink" title="连接到仓库、同步到本地"></a>连接到仓库、同步到本地</h5><p>进入项目目录</p><p>初始化（生成.git目录）：git init<br>连接远程仓库：git remote add origin <a href="http://github.com/仓库地址" target="_blank" rel="noopener">http://github.com/仓库地址</a><br>从远程仓库拉取文件：git pull origin “分支名”</p><h5 id="更改部分代码后提交"><a href="#更改部分代码后提交" class="headerlink" title="更改部分代码后提交"></a>更改部分代码后提交</h5><p>查看状态：git status或者git status -ss<br>所有不同的文件加入暂存区：git add .<br>提交到本地仓库: git commit -m ‘备注’<br>从远程仓库拉取文件：git pull origin “分支名”或使用git fetch origin 分支名<br>推送到远程仓库：git push orgin 分支名或强制推送git push orgin 分支名 –force</p><h5 id="登录命令"><a href="#登录命令" class="headerlink" title="登录命令"></a>登录命令</h5><p>邮箱： git config –global user.email “<a href="mailto:you@example.com" target="_blank" rel="noopener">you@example.com</a>“<br>密码：git config –global user.name “Your Name”</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教书先生API实例</title>
      <link href="/2023/09/28/jiao-shu-xian-sheng-api-shi-li/"/>
      <url>/2023/09/28/jiao-shu-xian-sheng-api-shi-li/</url>
      
        <content type="html"><![CDATA[<p>以前学习的时候总喜欢找点开源的API进行学习，不过却一直没有遇见合适的，接口亦是如此，人也亦是如此！<br><a href="https://api.oioweb.cn/api/common/OneFilm" target="_blank" rel="noopener">教书先生API</a>你值得拥有，提供了很多免费的API，且不会有跨域等问题，相当稳定，给大佬大赞！！！！！</p><p>文章主要对跟博客搭建比较契合的相关接口进行了说明。其中“响应数据实例”即是通过请求动态生成的数据，F12也可以在控制台看到相关响应的数据。</p><h4 id="每日推荐一部电影"><a href="#每日推荐一部电影" class="headerlink" title="每日推荐一部电影"></a><a href="https://api.oioweb.cn/api/common/OneFilm" target="_blank" rel="noopener">每日推荐一部电影</a></h4><p>每日推荐一部电影</p><h5 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h5><p> <a href="https://api.oioweb.cn/api/common/OneFilm" target="_blank" rel="noopener">https://api.oioweb.cn/api/common/OneFilm</a></p><h5 id="返回格式"><a href="#返回格式" class="headerlink" title="返回格式"></a>返回格式</h5><p>JSON</p><h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h5><p>GET</p><h5 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h5><p> <a href="https://api.oioweb.cn/api/common/OneFilm" target="_blank" rel="noopener">https://api.oioweb.cn/api/common/OneFilm</a></p><h5 id="请求参数说明"><a href="#请求参数说明" class="headerlink" title="请求参数说明"></a>请求参数说明</h5><p>无</p><h5 id="返回参数说明"><a href="#返回参数说明" class="headerlink" title="返回参数说明"></a>返回参数说明</h5><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>number</td><td>当前数据日期</td></tr><tr><td>mov_area</td><td>string</td><td>电影地区</td></tr><tr><td>mov_director</td><td>string</td><td>导演</td></tr><tr><td>mov_intro</td><td>string</td><td>电影描述</td></tr><tr><td>mov_link</td><td>string</td><td>豆瓣链接</td></tr><tr><td>mov_pic</td><td>string</td><td>电影封面</td></tr><tr><td>mov_rating</td><td>number</td><td>电影评分</td></tr><tr><td>mov_text</td><td>string</td><td>电影描述</td></tr><tr><td>mov_title</td><td>string</td><td>电影名称</td></tr><tr><td>mov_type</td><td>object</td><td>电影类型</td></tr><tr><td>mov_year</td><td>string</td><td>电影年份</td></tr></tbody></table><h5 id="返回示例"><a href="#返回示例" class="headerlink" title="返回示例"></a>返回示例</h5><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"date"</span><span class="token operator">:</span><span class="token string">"20230917"</span><span class="token punctuation">,</span>        <span class="token property">"mov_area"</span><span class="token operator">:</span><span class="token string">"法国"</span><span class="token punctuation">,</span>        <span class="token property">"mov_director"</span><span class="token operator">:</span><span class="token string">"奥黛丽·迪万"</span><span class="token punctuation">,</span>        <span class="token property">"mov_intro"</span><span class="token operator">:</span><span class="token string">"上个世纪60年代，法国禁止堕胎。高中女孩安娜因为一次放纵而不小心怀孕，因非法堕胎而面临的法律和生命危险，以及牺牲在学业和未来之间做出选择，寻求各种办法偷偷堕胎的故事。"</span><span class="token punctuation">,</span>        <span class="token property">"mov_link"</span><span class="token operator">:</span><span class="token string">"https://movie.douban.com/subject/35318021/"</span><span class="token punctuation">,</span>        <span class="token property">"mov_pic"</span><span class="token operator">:</span><span class="token string">"https://files.codelife.cc/itab/movieCalendar/c-2023032335318021.webp?x-oss-process=image/resize,        limit_0,        m_fill,        w_400/quality,        q_90/format,        webp"</span><span class="token punctuation">,</span>        <span class="token property">"poster_url"</span><span class="token operator">:</span><span class="token string">"https://files.codelife.cc/itab/movieCalendar/p-2023032335318021.webp?x-oss-process=image/resize,        limit_0,        m_fill,        w_273,        h_405/quality,        q_80/format,        webp"</span><span class="token punctuation">,</span>        <span class="token property">"mov_rating"</span><span class="token operator">:</span><span class="token string">"8.1"</span><span class="token punctuation">,</span>        <span class="token property">"mov_text"</span><span class="token operator">:</span><span class="token string">"漫长的一天里她端坐在镜前，梳理着她的金色长发。我或许会说，我们的悲剧正处在高潮时刻。"</span><span class="token punctuation">,</span>        <span class="token property">"mov_title"</span><span class="token operator">:</span><span class="token string">"正发生"</span><span class="token punctuation">,</span>        <span class="token property">"mov_type"</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token string">"剧情"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"mov_year"</span><span class="token operator">:</span><span class="token string">"2021"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="响应数据实例"><a href="#响应数据实例" class="headerlink" title="响应数据实例"></a>响应数据实例</h5><pre class="line-numbers language-json"><code class="language-json"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><hr><script src="https://cdn.staticfile.org/axios/1.5.0/axios.min.js"></script>  <script type="text/javascript">  axios.get('https://api.oioweb.cn/api/common/OneFilm')    .then(res => {    if(res.data.code == 200) {      const result = res.data.result      console.log("每日推荐一部电影")      console.log(result)      var languageJsonNum = document.querySelectorAll(".language-json")      languageJsonNum[3].textContent = JSON.stringify(result, null, 2)    } else {      console.log("请求失败！")    }  })    .catch(error => {      console.error(error);  }); </script><hr><hr><h4 id="每日一句英文"><a href="#每日一句英文" class="headerlink" title="每日一句英文"></a><a href="https://api.oioweb.cn/doc/common/OneDayEnglish" target="_blank" rel="noopener">每日一句英文</a></h4><p>每日一句英文，新的一天行动起来吧</p><h5 id="接口地址-1"><a href="#接口地址-1" class="headerlink" title="接口地址"></a>接口地址</h5><p> <a href="https://api.oioweb.cn/api/common/OneDayEnglish" target="_blank" rel="noopener">https://api.oioweb.cn/api/common/OneDayEnglish</a></p><h5 id="返回格式-1"><a href="#返回格式-1" class="headerlink" title="返回格式"></a>返回格式</h5><p>JSON</p><h5 id="请求方式-1"><a href="#请求方式-1" class="headerlink" title="请求方式"></a>请求方式</h5><p> GET</p><h5 id="请求示例-1"><a href="#请求示例-1" class="headerlink" title="请求示例"></a>请求示例</h5><p><a href="https://api.oioweb.cn/api/common/OneDayEnglish" target="_blank" rel="noopener">https://api.oioweb.cn/api/common/OneDayEnglish</a></p><h5 id="请求参数说明-1"><a href="#请求参数说明-1" class="headerlink" title="请求参数说明"></a>请求参数说明</h5><p>无</p><h5 id="返回参数说明-1"><a href="#返回参数说明-1" class="headerlink" title="返回参数说明"></a>返回参数说明</h5><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>tts</td><td>string</td><td>英文语音链接</td></tr><tr><td>content</td><td>string</td><td>英文内容</td></tr><tr><td>note</td><td>string</td><td>中文意译</td></tr><tr><td>dateline</td><td>string</td><td>事件</td></tr><tr><td>img</td><td>string</td><td>分享图片</td></tr></tbody></table><h5 id="返回实例"><a href="#返回实例" class="headerlink" title="返回实例"></a>返回实例</h5><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"tts"</span><span class="token operator">:</span><span class="token string">"https://staticedu-wps.cache.iciba.com/audio/36ecdfb303d3f8ea263d565ec0c59d4d.mp3"</span><span class="token punctuation">,</span>        <span class="token property">"content"</span><span class="token operator">:</span><span class="token string">"I will greet this day with love in my heart."</span><span class="token punctuation">,</span>        <span class="token property">"note"</span><span class="token operator">:</span><span class="token string">"我要用全身心的爱来迎接今天。"</span><span class="token punctuation">,</span>        <span class="token property">"dateline"</span><span class="token operator">:</span><span class="token string">"2023-04-12"</span><span class="token punctuation">,</span>        <span class="token property">"img"</span><span class="token operator">:</span><span class="token string">"https://staticedu-wps.cache.iciba.com/image/d97e0e2f64ee073ed7181ac29b29b64a.png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="响应数据实例-1"><a href="#响应数据实例-1" class="headerlink" title="响应数据实例"></a>响应数据实例</h5><pre class="line-numbers language-json"><code class="language-json"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><script type="text/javascript">  axios.get('https://api.oioweb.cn/api/common/OneDayEnglish')    .then(res => {    if(res.data.code == 200) {      const result = res.data.result      console.log("每日一句英文")      console.log(result)      var languageJsonNum = document.querySelectorAll(".language-json")      languageJsonNum[6].textContent = JSON.stringify(result, null, 2)    } else {      console.log("请求失败！")    }   })    .catch(error => {      console.error(error);   });  </script><hr><hr><h4 id="历史上的今天"><a href="#历史上的今天" class="headerlink" title="历史上的今天"></a><a href="https://api.oioweb.cn/doc/common/history" target="_blank" rel="noopener">历史上的今天</a></h4><p>历史上的今天都发生了哪些大事</p><h5 id="接口地址-2"><a href="#接口地址-2" class="headerlink" title="接口地址"></a>接口地址</h5><p><a href="https://api.oioweb.cn/api/common/history" target="_blank" rel="noopener">https://api.oioweb.cn/api/common/history</a></p><h5 id="返回格式-2"><a href="#返回格式-2" class="headerlink" title="返回格式"></a>返回格式</h5><p> JSON</p><h5 id="请求方式-2"><a href="#请求方式-2" class="headerlink" title="请求方式"></a>请求方式</h5><p> GET</p><h5 id="请求示例-2"><a href="#请求示例-2" class="headerlink" title="请求示例"></a>请求示例</h5><p> <a href="https://api.oioweb.cn/api/common/history" target="_blank" rel="noopener">https://api.oioweb.cn/api/common/history</a></p><h5 id="请求参数说明-2"><a href="#请求参数说明-2" class="headerlink" title="请求参数说明"></a>请求参数说明</h5><p>无</p><h5 id="返回示例-1"><a href="#返回示例-1" class="headerlink" title="返回示例"></a>返回示例</h5><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"-565"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"印度&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%8A%E8%BF%A6%E7%89%9F%E5%B0%BC\">释迦牟尼&lt;/a>出生"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"释迦牟尼，佛教创始人。姓乔答摩，名悉达多。“释迦牟尼”是佛教徒对他的尊称。释迦，种族名，意为“能”；牟尼，亦译为“文”，是尊称，意为“仁”、“儒”、“忍”、“寂”。合为“能仁”、“能儒”、“能忍”、“能寂”等，意即释迦族的“圣人”。"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E9%87%8A%E8%BF%A6%E7%89%9F%E5%B0%BC/120396"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1818"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"丹麦国王&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%85%8B%E9%87%8C%E6%96%AF%E8%92%82%E5%AE%89%E4%B9%9D%E4%B8%96\">克里斯蒂安九世&lt;/a>出生"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"克里斯蒂安九世（Christian Ⅸ，1818年4月8日－1906年1月29日），丹麦国王（1863年—1906年在位）。是&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%85%8B%E9%87%8C%E6%96%AF%E8%92%82%E5%AE%89%E4%B8%89%E4%B8%96\">克里斯蒂安三世&lt;/a>国王的九世"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E5%85%8B%E9%87%8C%E6%96%AF%E8%92%82%E5%AE%89%E4%B9%9D%E4%B8%96"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1896"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6\">交通大学&lt;/a>(&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A5%BF%E5%AE%89%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6\">西安交通大学&lt;/a>和&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6\">上海交通大学&lt;/a>的前身)建校"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"交通大学，成立于1921年，是一所历史悠久，以工科，管理科见长的综合性高等著名学府。前身是1896年成立的&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%97%E6%B4%8B%E5%85%AC%E5%AD%A6\">南洋公学&lt;/a>（今&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6\">上海交通"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1929"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"中国探月工程总设计师&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AD%99%E5%AE%B6%E6%A0%8B\">孙家栋&lt;/a>出生"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"孙家栋，男，1929年生，辽宁瓦房店市市人。是&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%BF%90%E8%BD%BD%E7%81%AB%E7%AE%AD\">运载火箭&lt;/a>与卫星技术专家、&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD%E7%A7%91%E5%AD%A6%E9%99%A2\">中国科学院&lt;/a>院士、国家宇航科学院院士、&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A5%BF%E5%AE%89%E7%94%B5%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6\">西安电子科技大学&lt;/a>"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E5%AD%99%E5%AE%B6%E6%A0%8B"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1938"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"前联合国秘书长&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A7%91%E8%8F%B2%C2%B7%E5%AE%89%E5%8D%97\">科菲·安南&lt;/a>出生"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"科菲·&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%89%E5%8D%97\">安南&lt;/a>标准名是科菲·阿塔·安南（Kofi Atta Annan，1938年4月8日－），&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8A%A0%E7%BA%B3\">加纳&lt;/a>&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BA%93%E9%A9%AC%E8%A5%BF\">库马西&lt;/a>人，&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%81%94%E5%90%88%E5%9B%BD\">联合国&lt;/a>第七任&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A7%98%E4%B9%A6%E9%95%BF\">秘书长&lt;/a>。他是一对双胞胎之"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E7%A7%91%E8%8F%B2%C2%B7%E5%AE%89%E5%8D%97"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1939"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"意大利入侵&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%98%BF%E5%B0%94%E5%B7%B4%E5%B0%BC%E4%BA%9A\">阿尔巴尼亚&lt;/a>"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"阿尔巴尼亚位于东&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%97%E6%AC%A7\">南欧&lt;/a>&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B7%B4%E5%B0%94%E5%B9%B2%E5%8D%8A%E5%B2%9B\">巴尔干半岛&lt;/a>西岸，北接&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A1%9E%E5%B0%94%E7%BB%B4%E4%BA%9A\">塞尔维亚&lt;/a>与&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BB%91%E5%B1%B1\">黑山&lt;/a>，东北与&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%A9%AC%E5%85%B6%E9%A1%BF\">马其顿&lt;/a>相连，东南邻&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B8%8C%E8%85%8A\">希腊&lt;/a>，西濒&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%9A%E5%BE%97%E9%87%8C%E4%BA%9A%E6%B5%B7\">亚得里亚海&lt;/a>和&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BC%8A%E5%A5%A5%E5%B0%BC%E4%BA%9A%E6%B5%B7\">伊奥尼亚海&lt;/a>，隔&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%A5%E7%89%B9%E6%9C%97%E6%89%98%E6%B5%B7%E5%B3%A1\">奥"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E9%98%BF%E5%B0%94%E5%B7%B4%E5%B0%BC%E4%BA%9A"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1946"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E8%81%94%E7%9B%9F\">国际联盟&lt;/a>决定自行解散，财产移交联合国"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"国际联盟，简称国联，是《&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%87%A1%E5%B0%94%E8%B5%9B%E6%9D%A1%E7%BA%A6\">凡尔赛条约&lt;/a>》签订后组成的国际组织，于1934年9月28日至1935年2月23日的最高峰时期，国联曾拥有58个会"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E8%81%94%E7%9B%9F"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1946"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"香港电影演员、导演&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BB%84%E7%99%BE%E9%B8%A3\">黄百鸣&lt;/a>出生"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"黄百鸣，香港电影从业员，曾任&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%B0%E8%89%BA%E5%9F%8E%E5%BD%B1%E4%B8%9A%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8\">新艺城影业有限公司&lt;/a>电影&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%9B%91%E5%88%B6\">监制&lt;/a>、&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BC%96%E5%89%A7\">编剧&lt;/a>、&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%BC%94%E5%91%98\">演员&lt;/a>。黄百鸣是香港响当当的一位人物，他以编剧身份进入香港&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%BC%94%E8%89%BA%E5%9C%88\">"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E9%BB%84%E7%99%BE%E9%B8%A3"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1946"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"“四·八”空难"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"1946年4月8日 出席重庆国共谈判与政治协商会议的中共代表回延安向党中央报告和请示工作，途中由于气候恶劣，能见度极差，飞机与地面失去联系，迷失方向。下午2时左右，在兴县黑茶山，飞机撞到山峰上，同行人员17人不幸全部遇难，史称“四八”空难。"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E9%BB%91%E8%8C%B6%E5%B1%B1%E7%A9%BA%E9%9A%BE"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1947"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"汽车时代的开创者美国人&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%A8%E5%88%A9%C2%B7%E7%A6%8F%E7%89%B9/532854\">亨利·福特&lt;/a>逝世"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"亨利·福特（HenryFord，1863年7月30日—1947年4月8日），&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD\">美国&lt;/a>汽车工程师与企业家，&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A6%8F%E7%89%B9%E6%B1%BD%E8%BD%A6%E5%85%AC%E5%8F%B8\">福特汽车公司&lt;/a>的建立者。他也是世界上第一位使"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E4%BA%A8%E5%88%A9%C2%B7%E7%A6%8F%E7%89%B9/532854"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1968"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"黄梅戏表演艺术家&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%A5%E5%87%A4%E8%8B%B1/5344\">严凤英&lt;/a>被迫害致死"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"严凤英，原名严鸿六，安徽省安庆市宜秀区罗岭镇黄梅村人，中国著名&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BB%84%E6%A2%85%E6%88%8F\">黄梅戏&lt;/a>表演艺术家，中国黄梅戏传承发展重要的开拓者和贡献者"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E4%B8%A5%E5%87%A4%E8%8B%B1/5344"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1973"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"西班牙画家、雕塑家&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B7%B4%E5%8B%83%E7%BD%97%C2%B7%E9%B2%81%E4%BC%8A%E6%96%AF%C2%B7%E6%AF%95%E5%8A%A0%E7%B4%A2\">巴伯罗·毕加索&lt;/a>逝世"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"毕加索，&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A5%BF%E7%8F%AD%E7%89%99\">西班牙&lt;/a>&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%BB%E5%AE%B6\">画家&lt;/a>、&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9B%95%E5%A1%91%E5%AE%B6\">雕塑家&lt;/a>。&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B3%95%E5%9B%BD\">法国&lt;/a>共产党党员。是&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8E%B0%E4%BB%A3%E8%89%BA%E6%9C%AF\">现代艺术&lt;/a>的创始人，西方现代派&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BB%98%E7%94%BB\">绘画&lt;/a>的主要代表。他于1907年创作的&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E3%80%8A%E4%BA%9A%E5%A8%81%E5%86%9C%E5%B0%91%E5%A5%B3%E3%80%8B\">《亚威农少女"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E5%B7%B4%E5%8B%83%E7%BD%97%C2%B7%E9%B2%81%E4%BC%8A%E6%96%AF%C2%B7%E6%AF%95%E5%8A%A0%E7%B4%A2"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1984"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B6%85%E6%B5%81\">超流&lt;/a>的发现者之一&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BD%BC%E5%BE%97%C2%B7%E5%8D%A1%E7%9A%AE%E6%9F%A5\">彼得·卡皮查&lt;/a>逝世"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"彼得·卡皮查（Пётр Леонидович Капица，&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/1894%E5%B9%B4\">1894年&lt;/a>&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/7%E6%9C%889%E6%97%A5\">7月9日&lt;/a>－&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/1984%E5%B9%B4\">1984年&lt;/a>&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/4%E6%9C%888%E6%97%A5\">4月8日&lt;/a>），&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%8B%8F%E8%81%94\">苏联&lt;/a>著名&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AD%A6%E5%AE%B6\">物理学家&lt;/a>，&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B6%85%E6%B5%81%E4%BD%93\">超流体&lt;/a>的发现者"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E5%BD%BC%E5%BE%97%C2%B7%E5%8D%A1%E7%9A%AE%E6%9F%A5"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1993"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"世界上跨径最大的斜拉桥——上海&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9D%A8%E6%B5%A6%E5%A4%A7%E6%A1%A5\">杨浦大桥&lt;/a>合拢"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"杨浦大桥是&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7\">上海&lt;/a>的一座跨越&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BB%84%E6%B5%A6%E6%B1%9F\">黄浦江&lt;/a>的&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD\">中国&lt;/a>自行设计、建造的双塔双索面迭合梁&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%9C%E6%8B%89%E6%A1%A5\">斜拉桥&lt;/a>。杨浦大桥于1991年4月29日动工，1993年9月15日"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E6%9D%A8%E6%B5%A6%E5%A4%A7%E6%A1%A5"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"1994"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%96%E7%95%8C%E5%8D%AB%E7%94%9F%E7%BB%84%E7%BB%87\">世界卫生组织&lt;/a>宣布&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%84%8A%E9%AB%93%E7%81%B0%E8%B4%A8%E7%82%8E\">脊髓灰质炎&lt;/a>已基本绝迹"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"脊髓灰质炎是急性传染病，由病毒侵入血液循环系统引起，部分病毒可侵入神经系统。患者多为一至六岁儿童，主要症状是发热，全身"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E8%84%8A%E9%AB%93%E7%81%B0%E8%B4%A8%E7%82%8E"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"year"</span><span class="token operator">:</span><span class="token string">"2013"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"英国前首相&lt;a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8E%9B%E6%A0%BC%E4%B8%BD%E7%89%B9%C2%B7%E5%B8%8C%E5%B0%94%E8%BE%BE%C2%B7%E6%92%92%E5%88%87%E5%B0%94\">撒切尔夫人&lt;/a>逝世"</span><span class="token punctuation">,</span>            <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"撒切尔夫人是英国著名右翼政治家，是至今为止英国唯一一位女首相，被苏联媒体称为“铁娘子”。她成功复苏英国经济，但也让英国社会付出了沉重的代价，犯罪率大幅上升，社会分级日趋严重。"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span><span class="token string">"https://baike.baidu.com/item/%E7%8E%9B%E6%A0%BC%E4%B8%BD%E7%89%B9%C2%B7%E5%B8%8C%E5%B0%94%E8%BE%BE%C2%B7%E6%92%92%E5%88%87%E5%B0%94"</span><span class="token punctuation">,</span>            <span class="token property">"image"</span><span class="token operator">:</span><span class="token string">"https://baike.bdimg.com/cms/rc/r/image/2014-09-08/838a5a02371ce465f5187854d19f4ab9_360_212.jpg"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="响应数据实例-2"><a href="#响应数据实例-2" class="headerlink" title="响应数据实例"></a>响应数据实例</h5><pre class="line-numbers language-json"><code class="language-json"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><script type="text/javascript">  axios.get('https://api.oioweb.cn/api/common/history')    .then(res => {    if(res.data.code == 200) {      const result = res.data      console.log("历史上的今天")      console.log(result)      var languageJsonNum = document.querySelectorAll(".language-json")      languageJsonNum[10].textContent = JSON.stringify(result, null, 2)    } else {      console.log("请求失败！")    }  })    .catch(error => {      console.error(error);  });  </script><hr><hr><h4 id="天气信息查询"><a href="#天气信息查询" class="headerlink" title="天气信息查询"></a><a href="https://api.oioweb.cn/doc/weather/GetWeather" target="_blank" rel="noopener">天气信息查询</a></h4><p>查询当地天气信息以及未来天气</p><h5 id="接口地址-3"><a href="#接口地址-3" class="headerlink" title="接口地址"></a>接口地址</h5><p> <a href="https://api.oioweb.cn/api/weather/GetWeather" target="_blank" rel="noopener">https://api.oioweb.cn/api/weather/GetWeather</a></p><h5 id="返回格式-3"><a href="#返回格式-3" class="headerlink" title="返回格式"></a>返回格式</h5><p> JSON</p><h5 id="请求方式-3"><a href="#请求方式-3" class="headerlink" title="请求方式"></a>请求方式</h5><p> GET</p><h5 id="请求示例-3"><a href="#请求示例-3" class="headerlink" title="请求示例"></a>请求示例</h5><p> <a href="https://api.oioweb.cn/api/weather/GetWeather" target="_blank" rel="noopener">https://api.oioweb.cn/api/weather/GetWeather</a></p><h5 id="请求参数说明-3"><a href="#请求参数说明-3" class="headerlink" title="请求参数说明"></a>请求参数说明</h5><p>无</p><h5 id="返回参数说明-2"><a href="#返回参数说明-2" class="headerlink" title="返回参数说明"></a>返回参数说明</h5><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>city.country</td><td>string</td><td>国家</td></tr><tr><td>city.economize</td><td>string</td><td>省</td></tr><tr><td>city.city_name</td><td>string</td><td>市</td></tr><tr><td>condition</td><td>object</td><td>当天天气</td></tr><tr><td>condition.humidity</td><td>string</td><td>湿度</td></tr><tr><td>condition.pressure</td><td>string</td><td>气压-单位：百帕</td></tr><tr><td>condition.sunRise</td><td>string</td><td>日出时间</td></tr><tr><td>condition.sunSet</td><td>string</td><td>日落时间</td></tr><tr><td>condition.realFeel</td><td>string</td><td>体感温度-单位：摄氏度</td></tr><tr><td>condition.temp</td><td>string</td><td>实时温度-单位：摄氏度</td></tr><tr><td>condition.tips</td><td>string</td><td>天气提示</td></tr><tr><td>condition.update_time</td><td>string</td><td>更新时间</td></tr><tr><td>condition.windLevel</td><td>string</td><td>风力等级</td></tr><tr><td>condition.condition</td><td>string</td><td>天气状况</td></tr><tr><td>condition.windSpeed</td><td>string</td><td>风速</td></tr><tr><td>condition.windDir</td><td>string</td><td>风向</td></tr><tr><td>condition.windDegrees</td><td>string</td><td>风向角度</td></tr><tr><td>condition.uvi</td><td>string</td><td>紫外线强度</td></tr><tr><td>condition.vis</td><td>string</td><td>能见度</td></tr><tr><td>forecast</td><td>object</td><td>未来天气情况</td></tr><tr><td>forecast.conditionDay</td><td>string</td><td>白天天气现象</td></tr><tr><td>forecast.conditionNight</td><td>string</td><td>夜间天气现象</td></tr><tr><td>forecast.humidity</td><td>string</td><td>湿度</td></tr><tr><td>forecast.moonphase</td><td>string</td><td>月相</td></tr><tr><td>forecast.moonrise</td><td>string</td><td>月出</td></tr><tr><td>forecast.moonset</td><td>string</td><td>月落</td></tr><tr><td>forecast.pop</td><td>string</td><td>降水概率</td></tr><tr><td>forecast.predictDate</td><td>string</td><td>预报日期</td></tr><tr><td>forecast.qpf</td><td>string</td><td>未来一天降水预报</td></tr><tr><td>forecast.sunrise</td><td>string</td><td>日出时间</td></tr><tr><td>forecast.sunset</td><td>string</td><td>日落时间</td></tr><tr><td>forecast.tempDay</td><td>string</td><td>白天温度（最高温）</td></tr><tr><td>forecast.tempNight</td><td>string</td><td>夜间温度（最低温）</td></tr><tr><td>forecast.updatetime</td><td>string</td><td>更新时间</td></tr><tr><td>forecast.uvi</td><td>string</td><td>紫外线强度</td></tr><tr><td>forecast.windDegreesDay</td><td>string</td><td>白天风向角度</td></tr><tr><td>forecast.windDegreesNight</td><td>string</td><td>夜间风向角度</td></tr><tr><td>forecast.windDirDay</td><td>string</td><td>白天风向</td></tr><tr><td>forecast.windDirNight</td><td>string</td><td>夜间风向</td></tr><tr><td>forecast.windLevelDay</td><td>object</td><td>白天风级</td></tr><tr><td>forecast.windLevelNight</td><td>string</td><td>夜间风级</td></tr><tr><td>forecast.windSpeedDay</td><td>string</td><td>白天风速</td></tr><tr><td>forecast.windSpeedNight</td><td>string</td><td>夜间风速</td></tr></tbody></table><h5 id="返回实例-1"><a href="#返回实例-1" class="headerlink" title="返回实例"></a>返回实例</h5><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"city"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"cityId"</span><span class="token operator">:</span><span class="token number">379</span><span class="token punctuation">,</span>            <span class="token property">"counname"</span><span class="token operator">:</span><span class="token string">"中国"</span><span class="token punctuation">,</span>            <span class="token property">"ianatimezone"</span><span class="token operator">:</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"郑州市"</span><span class="token punctuation">,</span>            <span class="token property">"pname"</span><span class="token operator">:</span><span class="token string">"河南省"</span><span class="token punctuation">,</span>            <span class="token property">"secondaryname"</span><span class="token operator">:</span><span class="token string">"河南省"</span><span class="token punctuation">,</span>            <span class="token property">"timezone"</span><span class="token operator">:</span><span class="token string">"8"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"condition"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"condition"</span><span class="token operator">:</span><span class="token string">"阴"</span><span class="token punctuation">,</span>            <span class="token property">"conditionId"</span><span class="token operator">:</span><span class="token string">"85"</span><span class="token punctuation">,</span>            <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"85"</span><span class="token punctuation">,</span>            <span class="token property">"icon"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>            <span class="token property">"pressure"</span><span class="token operator">:</span><span class="token string">"1001"</span><span class="token punctuation">,</span>            <span class="token property">"realFeel"</span><span class="token operator">:</span><span class="token string">"19"</span><span class="token punctuation">,</span>            <span class="token property">"sunRise"</span><span class="token operator">:</span><span class="token string">"2023-05-28 05:15:00"</span><span class="token punctuation">,</span>            <span class="token property">"sunSet"</span><span class="token operator">:</span><span class="token string">"2023-05-28 19:30:00"</span><span class="token punctuation">,</span>            <span class="token property">"temp"</span><span class="token operator">:</span><span class="token string">"19"</span><span class="token punctuation">,</span>            <span class="token property">"tips"</span><span class="token operator">:</span><span class="token string">"略微偏凉，还是蛮舒适的。"</span><span class="token punctuation">,</span>            <span class="token property">"updatetime"</span><span class="token operator">:</span><span class="token string">"2023-05-28 23:15:08"</span><span class="token punctuation">,</span>            <span class="token property">"uvi"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>            <span class="token property">"vis"</span><span class="token operator">:</span><span class="token string">"8700"</span><span class="token punctuation">,</span>            <span class="token property">"windDegrees"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>            <span class="token property">"windDir"</span><span class="token operator">:</span><span class="token string">"北风"</span><span class="token punctuation">,</span>            <span class="token property">"windLevel"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span>            <span class="token property">"windSpeed"</span><span class="token operator">:</span><span class="token string">"3.81"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"forecast"</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"conditionDay"</span><span class="token operator">:</span><span class="token string">"小雨"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdDay"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdNight"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span>                <span class="token property">"conditionNight"</span><span class="token operator">:</span><span class="token string">"小雨"</span><span class="token punctuation">,</span>                <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"88"</span><span class="token punctuation">,</span>                <span class="token property">"moonphase"</span><span class="token operator">:</span><span class="token string">"First"</span><span class="token punctuation">,</span>                <span class="token property">"moonrise"</span><span class="token operator">:</span><span class="token string">"2023-05-27 11:40:00"</span><span class="token punctuation">,</span>                <span class="token property">"moonset"</span><span class="token operator">:</span><span class="token string">"2023-05-27 00:54:00"</span><span class="token punctuation">,</span>                <span class="token property">"pop"</span><span class="token operator">:</span><span class="token string">"60"</span><span class="token punctuation">,</span>                <span class="token property">"predictDate"</span><span class="token operator">:</span><span class="token string">"2023-05-27"</span><span class="token punctuation">,</span>                <span class="token property">"qpf"</span><span class="token operator">:</span><span class="token string">"4.3"</span><span class="token punctuation">,</span>                <span class="token property">"sunrise"</span><span class="token operator">:</span><span class="token string">"2023-05-27 05:15:00"</span><span class="token punctuation">,</span>                <span class="token property">"sunset"</span><span class="token operator">:</span><span class="token string">"2023-05-27 19:30:00"</span><span class="token punctuation">,</span>                <span class="token property">"tempDay"</span><span class="token operator">:</span><span class="token string">"21"</span><span class="token punctuation">,</span>                <span class="token property">"tempNight"</span><span class="token operator">:</span><span class="token string">"18"</span><span class="token punctuation">,</span>                <span class="token property">"updatetime"</span><span class="token operator">:</span><span class="token string">"2023-05-27 23:08:00"</span><span class="token punctuation">,</span>                <span class="token property">"uvi"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesDay"</span><span class="token operator">:</span><span class="token string">"45"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesNight"</span><span class="token operator">:</span><span class="token string">"45"</span><span class="token punctuation">,</span>                <span class="token property">"windDirDay"</span><span class="token operator">:</span><span class="token string">"东北风"</span><span class="token punctuation">,</span>                <span class="token property">"windDirNight"</span><span class="token operator">:</span><span class="token string">"东北风"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelDay"</span><span class="token operator">:</span><span class="token string">"3-4"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelNight"</span><span class="token operator">:</span><span class="token string">"3-4"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedDay"</span><span class="token operator">:</span><span class="token string">"5.6"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedNight"</span><span class="token operator">:</span><span class="token string">"5.6"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"conditionDay"</span><span class="token operator">:</span><span class="token string">"小雨"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdDay"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdNight"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span>                <span class="token property">"conditionNight"</span><span class="token operator">:</span><span class="token string">"小雨"</span><span class="token punctuation">,</span>                <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"82"</span><span class="token punctuation">,</span>                <span class="token property">"moonphase"</span><span class="token operator">:</span><span class="token string">"WaxingGibbous"</span><span class="token punctuation">,</span>                <span class="token property">"moonrise"</span><span class="token operator">:</span><span class="token string">"2023-05-28 12:38:00"</span><span class="token punctuation">,</span>                <span class="token property">"moonset"</span><span class="token operator">:</span><span class="token string">"2023-05-28 01:22:00"</span><span class="token punctuation">,</span>                <span class="token property">"pop"</span><span class="token operator">:</span><span class="token string">"60"</span><span class="token punctuation">,</span>                <span class="token property">"predictDate"</span><span class="token operator">:</span><span class="token string">"2023-05-28"</span><span class="token punctuation">,</span>                <span class="token property">"qpf"</span><span class="token operator">:</span><span class="token string">"3.7"</span><span class="token punctuation">,</span>                <span class="token property">"sunrise"</span><span class="token operator">:</span><span class="token string">"2023-05-28 05:15:00"</span><span class="token punctuation">,</span>                <span class="token property">"sunset"</span><span class="token operator">:</span><span class="token string">"2023-05-28 19:30:00"</span><span class="token punctuation">,</span>                <span class="token property">"tempDay"</span><span class="token operator">:</span><span class="token string">"21"</span><span class="token punctuation">,</span>                <span class="token property">"tempNight"</span><span class="token operator">:</span><span class="token string">"18"</span><span class="token punctuation">,</span>                <span class="token property">"updatetime"</span><span class="token operator">:</span><span class="token string">"2023-05-28 22:07:00"</span><span class="token punctuation">,</span>                <span class="token property">"uvi"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesDay"</span><span class="token operator">:</span><span class="token string">"45"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesNight"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>                <span class="token property">"windDirDay"</span><span class="token operator">:</span><span class="token string">"东北风"</span><span class="token punctuation">,</span>                <span class="token property">"windDirNight"</span><span class="token operator">:</span><span class="token string">"北风"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelDay"</span><span class="token operator">:</span><span class="token string">"3-4"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelNight"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedDay"</span><span class="token operator">:</span><span class="token string">"5.6"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedNight"</span><span class="token operator">:</span><span class="token string">"0.9"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"conditionDay"</span><span class="token operator">:</span><span class="token string">"小雨"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdDay"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdNight"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span>                <span class="token property">"conditionNight"</span><span class="token operator">:</span><span class="token string">"小雨"</span><span class="token punctuation">,</span>                <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"75"</span><span class="token punctuation">,</span>                <span class="token property">"moonphase"</span><span class="token operator">:</span><span class="token string">"WaxingGibbous"</span><span class="token punctuation">,</span>                <span class="token property">"moonrise"</span><span class="token operator">:</span><span class="token string">"2023-05-29 13:35:00"</span><span class="token punctuation">,</span>                <span class="token property">"moonset"</span><span class="token operator">:</span><span class="token string">"2023-05-29 01:47:00"</span><span class="token punctuation">,</span>                <span class="token property">"pop"</span><span class="token operator">:</span><span class="token string">"40"</span><span class="token punctuation">,</span>                <span class="token property">"predictDate"</span><span class="token operator">:</span><span class="token string">"2023-05-29"</span><span class="token punctuation">,</span>                <span class="token property">"qpf"</span><span class="token operator">:</span><span class="token string">"2.0"</span><span class="token punctuation">,</span>                <span class="token property">"sunrise"</span><span class="token operator">:</span><span class="token string">"2023-05-29 05:14:00"</span><span class="token punctuation">,</span>                <span class="token property">"sunset"</span><span class="token operator">:</span><span class="token string">"2023-05-29 19:31:00"</span><span class="token punctuation">,</span>                <span class="token property">"tempDay"</span><span class="token operator">:</span><span class="token string">"25"</span><span class="token punctuation">,</span>                <span class="token property">"tempNight"</span><span class="token operator">:</span><span class="token string">"19"</span><span class="token punctuation">,</span>                <span class="token property">"updatetime"</span><span class="token operator">:</span><span class="token string">"2023-05-28 22:07:00"</span><span class="token punctuation">,</span>                <span class="token property">"uvi"</span><span class="token operator">:</span><span class="token string">"4"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesDay"</span><span class="token operator">:</span><span class="token string">"45"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesNight"</span><span class="token operator">:</span><span class="token string">"315"</span><span class="token punctuation">,</span>                <span class="token property">"windDirDay"</span><span class="token operator">:</span><span class="token string">"东北风"</span><span class="token punctuation">,</span>                <span class="token property">"windDirNight"</span><span class="token operator">:</span><span class="token string">"西北风"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelDay"</span><span class="token operator">:</span><span class="token string">"3-4"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelNight"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedDay"</span><span class="token operator">:</span><span class="token string">"5.6"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedNight"</span><span class="token operator">:</span><span class="token string">"2.4"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"conditionDay"</span><span class="token operator">:</span><span class="token string">"小雨"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdDay"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdNight"</span><span class="token operator">:</span><span class="token string">"31"</span><span class="token punctuation">,</span>                <span class="token property">"conditionNight"</span><span class="token operator">:</span><span class="token string">"多云"</span><span class="token punctuation">,</span>                <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"78"</span><span class="token punctuation">,</span>                <span class="token property">"moonphase"</span><span class="token operator">:</span><span class="token string">"WaxingGibbous"</span><span class="token punctuation">,</span>                <span class="token property">"moonrise"</span><span class="token operator">:</span><span class="token string">"2023-05-30 14:33:00"</span><span class="token punctuation">,</span>                <span class="token property">"moonset"</span><span class="token operator">:</span><span class="token string">"2023-05-30 02:11:00"</span><span class="token punctuation">,</span>                <span class="token property">"pop"</span><span class="token operator">:</span><span class="token string">"60"</span><span class="token punctuation">,</span>                <span class="token property">"predictDate"</span><span class="token operator">:</span><span class="token string">"2023-05-30"</span><span class="token punctuation">,</span>                <span class="token property">"qpf"</span><span class="token operator">:</span><span class="token string">"1.8"</span><span class="token punctuation">,</span>                <span class="token property">"sunrise"</span><span class="token operator">:</span><span class="token string">"2023-05-30 05:14:00"</span><span class="token punctuation">,</span>                <span class="token property">"sunset"</span><span class="token operator">:</span><span class="token string">"2023-05-30 19:32:00"</span><span class="token punctuation">,</span>                <span class="token property">"tempDay"</span><span class="token operator">:</span><span class="token string">"26"</span><span class="token punctuation">,</span>                <span class="token property">"tempNight"</span><span class="token operator">:</span><span class="token string">"17"</span><span class="token punctuation">,</span>                <span class="token property">"updatetime"</span><span class="token operator">:</span><span class="token string">"2023-05-28 22:07:00"</span><span class="token punctuation">,</span>                <span class="token property">"uvi"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesDay"</span><span class="token operator">:</span><span class="token string">"45"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesNight"</span><span class="token operator">:</span><span class="token string">"315"</span><span class="token punctuation">,</span>                <span class="token property">"windDirDay"</span><span class="token operator">:</span><span class="token string">"东北风"</span><span class="token punctuation">,</span>                <span class="token property">"windDirNight"</span><span class="token operator">:</span><span class="token string">"西北风"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelDay"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelNight"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedDay"</span><span class="token operator">:</span><span class="token string">"2.4"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedNight"</span><span class="token operator">:</span><span class="token string">"0.9"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"conditionDay"</span><span class="token operator">:</span><span class="token string">"多云"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdDay"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdNight"</span><span class="token operator">:</span><span class="token string">"31"</span><span class="token punctuation">,</span>                <span class="token property">"conditionNight"</span><span class="token operator">:</span><span class="token string">"多云"</span><span class="token punctuation">,</span>                <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"63"</span><span class="token punctuation">,</span>                <span class="token property">"moonphase"</span><span class="token operator">:</span><span class="token string">"WaxingGibbous"</span><span class="token punctuation">,</span>                <span class="token property">"moonrise"</span><span class="token operator">:</span><span class="token string">"2023-05-31 15:33:00"</span><span class="token punctuation">,</span>                <span class="token property">"moonset"</span><span class="token operator">:</span><span class="token string">"2023-05-31 02:35:00"</span><span class="token punctuation">,</span>                <span class="token property">"pop"</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">,</span>                <span class="token property">"predictDate"</span><span class="token operator">:</span><span class="token string">"2023-05-31"</span><span class="token punctuation">,</span>                <span class="token property">"qpf"</span><span class="token operator">:</span><span class="token string">"0.0"</span><span class="token punctuation">,</span>                <span class="token property">"sunrise"</span><span class="token operator">:</span><span class="token string">"2023-05-31 05:14:00"</span><span class="token punctuation">,</span>                <span class="token property">"sunset"</span><span class="token operator">:</span><span class="token string">"2023-05-31 19:32:00"</span><span class="token punctuation">,</span>                <span class="token property">"tempDay"</span><span class="token operator">:</span><span class="token string">"29"</span><span class="token punctuation">,</span>                <span class="token property">"tempNight"</span><span class="token operator">:</span><span class="token string">"19"</span><span class="token punctuation">,</span>                <span class="token property">"updatetime"</span><span class="token operator">:</span><span class="token string">"2023-05-28 22:07:00"</span><span class="token punctuation">,</span>                <span class="token property">"uvi"</span><span class="token operator">:</span><span class="token string">"9"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesDay"</span><span class="token operator">:</span><span class="token string">"90"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesNight"</span><span class="token operator">:</span><span class="token string">"225"</span><span class="token punctuation">,</span>                <span class="token property">"windDirDay"</span><span class="token operator">:</span><span class="token string">"东风"</span><span class="token punctuation">,</span>                <span class="token property">"windDirNight"</span><span class="token operator">:</span><span class="token string">"西南风"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelDay"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelNight"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedDay"</span><span class="token operator">:</span><span class="token string">"0.9"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedNight"</span><span class="token operator">:</span><span class="token string">"2.4"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"conditionDay"</span><span class="token operator">:</span><span class="token string">"多云"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdDay"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdNight"</span><span class="token operator">:</span><span class="token string">"31"</span><span class="token punctuation">,</span>                <span class="token property">"conditionNight"</span><span class="token operator">:</span><span class="token string">"多云"</span><span class="token punctuation">,</span>                <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"53"</span><span class="token punctuation">,</span>                <span class="token property">"moonphase"</span><span class="token operator">:</span><span class="token string">"WaxingGibbous"</span><span class="token punctuation">,</span>                <span class="token property">"moonrise"</span><span class="token operator">:</span><span class="token string">"2023-06-01 16:36:00"</span><span class="token punctuation">,</span>                <span class="token property">"moonset"</span><span class="token operator">:</span><span class="token string">"2023-06-01 03:01:00"</span><span class="token punctuation">,</span>                <span class="token property">"pop"</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">,</span>                <span class="token property">"predictDate"</span><span class="token operator">:</span><span class="token string">"2023-06-01"</span><span class="token punctuation">,</span>                <span class="token property">"qpf"</span><span class="token operator">:</span><span class="token string">"0.0"</span><span class="token punctuation">,</span>                <span class="token property">"sunrise"</span><span class="token operator">:</span><span class="token string">"2023-06-01 05:13:00"</span><span class="token punctuation">,</span>                <span class="token property">"sunset"</span><span class="token operator">:</span><span class="token string">"2023-06-01 19:33:00"</span><span class="token punctuation">,</span>                <span class="token property">"tempDay"</span><span class="token operator">:</span><span class="token string">"31"</span><span class="token punctuation">,</span>                <span class="token property">"tempNight"</span><span class="token operator">:</span><span class="token string">"21"</span><span class="token punctuation">,</span>                <span class="token property">"updatetime"</span><span class="token operator">:</span><span class="token string">"2023-05-28 22:07:00"</span><span class="token punctuation">,</span>                <span class="token property">"uvi"</span><span class="token operator">:</span><span class="token string">"10"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesDay"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesNight"</span><span class="token operator">:</span><span class="token string">"315"</span><span class="token punctuation">,</span>                <span class="token property">"windDirDay"</span><span class="token operator">:</span><span class="token string">"北风"</span><span class="token punctuation">,</span>                <span class="token property">"windDirNight"</span><span class="token operator">:</span><span class="token string">"西北风"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelDay"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelNight"</span><span class="token operator">:</span><span class="token string">"3-4"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedDay"</span><span class="token operator">:</span><span class="token string">"2.4"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedNight"</span><span class="token operator">:</span><span class="token string">"5.6"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"conditionDay"</span><span class="token operator">:</span><span class="token string">"小雨"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdDay"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span>                <span class="token property">"conditionIdNight"</span><span class="token operator">:</span><span class="token string">"30"</span><span class="token punctuation">,</span>                <span class="token property">"conditionNight"</span><span class="token operator">:</span><span class="token string">"晴"</span><span class="token punctuation">,</span>                <span class="token property">"humidity"</span><span class="token operator">:</span><span class="token string">"47"</span><span class="token punctuation">,</span>                <span class="token property">"moonphase"</span><span class="token operator">:</span><span class="token string">"WaxingGibbous"</span><span class="token punctuation">,</span>                <span class="token property">"moonrise"</span><span class="token operator">:</span><span class="token string">"2023-06-02 17:43:00"</span><span class="token punctuation">,</span>                <span class="token property">"moonset"</span><span class="token operator">:</span><span class="token string">"2023-06-02 03:31:00"</span><span class="token punctuation">,</span>                <span class="token property">"pop"</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">,</span>                <span class="token property">"predictDate"</span><span class="token operator">:</span><span class="token string">"2023-06-02"</span><span class="token punctuation">,</span>                <span class="token property">"qpf"</span><span class="token operator">:</span><span class="token string">"0.0"</span><span class="token punctuation">,</span>                <span class="token property">"sunrise"</span><span class="token operator">:</span><span class="token string">"2023-06-02 05:13:00"</span><span class="token punctuation">,</span>                <span class="token property">"sunset"</span><span class="token operator">:</span><span class="token string">"2023-06-02 19:34:00"</span><span class="token punctuation">,</span>                <span class="token property">"tempDay"</span><span class="token operator">:</span><span class="token string">"26"</span><span class="token punctuation">,</span>                <span class="token property">"tempNight"</span><span class="token operator">:</span><span class="token string">"18"</span><span class="token punctuation">,</span>                <span class="token property">"updatetime"</span><span class="token operator">:</span><span class="token string">"2023-05-28 22:07:00"</span><span class="token punctuation">,</span>                <span class="token property">"uvi"</span><span class="token operator">:</span><span class="token string">"10"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesDay"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>                <span class="token property">"windDegreesNight"</span><span class="token operator">:</span><span class="token string">"315"</span><span class="token punctuation">,</span>                <span class="token property">"windDirDay"</span><span class="token operator">:</span><span class="token string">"北风"</span><span class="token punctuation">,</span>                <span class="token property">"windDirNight"</span><span class="token operator">:</span><span class="token string">"西北风"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelDay"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>                <span class="token property">"windLevelNight"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedDay"</span><span class="token operator">:</span><span class="token string">"0.9"</span><span class="token punctuation">,</span>                <span class="token property">"windSpeedNight"</span><span class="token operator">:</span><span class="token string">"2.4"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"success"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="响应数据实例-3"><a href="#响应数据实例-3" class="headerlink" title="响应数据实例"></a>响应数据实例</h5><pre class="line-numbers language-json"><code class="language-json"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><script type="text/javascript">  axios.get('https://api.oioweb.cn/api/weather/GetWeather')    .then(res => {  if(res.data.code == 200) {    const result = res.data.result    console.log("天气信息查询")    console.log(result)    var languageJsonNum = document.querySelectorAll(".language-json")    console.log(languageJsonNum)    languageJsonNum[13].textContent = JSON.stringify(result, null, 2)  } else {    console.log("请求失败！")  }  })    .catch(error => {      console.error(error);  });  </script><hr><p>以上就是我对<a href="https://api.oioweb.cn/" target="_blank" rel="noopener">教书先生API</a>提供的部分API的介绍，基本上如果使用渲染数据的话都是非常方便的，感兴趣的小伙伴可以去拜访拜访大佬！</p><h4 id="附录：教书先生API所有接口"><a href="#附录：教书先生API所有接口" class="headerlink" title="附录：教书先生API所有接口"></a>附录：<a href="https://api.oioweb.cn/" target="_blank" rel="noopener">教书先生API</a>所有接口</h4><table><thead><tr><th align="left">名称</th><th align="left">描述</th><th align="left">官方文档路径</th><th align="left">调用次数</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><hr><script type="text/javascript">  var tableBodies = document.getElementsByTagName('tbody');  var lastTbody = tableBodies[tableBodies.length - 1];  lastTbody.innerHTML = ''  lastTbody.innerHTML = '<tr><td>请求失败！请检查网络连接。</td></tr>'  axios.get('https://api.oioweb.cn/libraries')    .then(res => {  if(res.data.code == 200) {    const result = res.data.result    console.log("目前教书先生API共提供" + result.length + "个接口")    console.log(result)    var tableHtml = ""    for(i = 0; i < result.length; i++) {      tableHtml += '<tr><td>' + result[i].name + '</td>' + '<td>' + result[i].description + '</td>' + '<td><a href="https://api.oioweb.cn/doc/' + result[i].router + '">https://api.oioweb.cn/doc/' + result[i].router + '</a></td>' + '<td>' + result[i].sum + '</td></tr>'    }    lastTbody.innerHTML = ''    lastTbody.innerHTML = tableHtml  } else {    console.log("请求失败！")  }  })    .catch(error => {      console.error(error);  });  </script><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> API </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库相关知识点（整理中）</title>
      <link href="/2023/07/11/shu-ju-ku-xiang-guan-zhi-shi-dian-zheng-li-zhong/"/>
      <url>/2023/07/11/shu-ju-ku-xiang-guan-zhi-shi-dian-zheng-li-zhong/</url>
      
        <content type="html"><![CDATA[<h4 id="常用的聚合函数有哪五种？"><a href="#常用的聚合函数有哪五种？" class="headerlink" title="常用的聚合函数有哪五种？"></a>常用的聚合函数有哪五种？</h4><p>count()、sum()、avg()、min()、max()</p><p>count()：求表的行数或者指定表中某个列的列值行数，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名 <span class="token comment" spellcheck="true">--得到该列值的非null值的行数</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> 表名  <span class="token comment" spellcheck="true">--用于统计整个表的行数。任何行，只要有一行非null，则整个表的行数就会被统计上。全为null（不会出现该情况）则不被统计</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>sum()：返回指定数据的和，只能用于数字列，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp   <span class="token comment" spellcheck="true">--求所有salary的总和</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>max()：返回一列中的最大值，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> table_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>min()：返回一列中的最小值，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> table_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>avg()：返回数值列的平均值，null值被忽略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_sal <span class="token keyword">from</span> emp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li>聚合函数可用于任何有效的表达式</li><li>聚合函数会忽略空值</li><li>distinct关键字可以与聚合函数一起使用，这样可以在聚合函数的计算中排除重复项</li></ol><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><table><thead><tr><th>聚合函数</th><th>描述</th><th>实例</th><th>MySQL</th><th>SQL Server</th></tr></thead><tbody><tr><td><strong>AVG()</strong></td><td>返回某列的平均值</td><td>SELECT AVG(column_name) FROM table_name;</td><td>支持</td><td>支持</td></tr><tr><td><strong>COUNT()</strong></td><td>返回某列中的值的数量</td><td>SELECT COUNT(column_name) FROM table_name;</td><td>支持</td><td>支持 COUNT() 函数，并且提供了额外的选项，如 COUNT_BIG() 用于处理大量数据</td></tr><tr><td><strong>MAX()</strong></td><td>返回某列中的最大值</td><td>SELECT MAX(column_name) FROM table_name;</td><td>支持</td><td>支持</td></tr><tr><td><strong>MIN()</strong></td><td>返回某列中的最小值</td><td>SELECT MIN(column_name) FROM table_name;</td><td>支持</td><td>支持</td></tr><tr><td><strong>SUM()</strong></td><td>返回某列值的总和</td><td>SELECT SUM(column_name) FROM table_name;</td><td>支持</td><td>支持</td></tr><tr><td><strong>GROUP_CONCAT()</strong></td><td>在某些数据库系统（如 MySQL）中，将多个行的值组合成一个由分隔符分隔的字符串</td><td>SELECT GROUP_CONCAT(column_name SEPARATOR ‘, ‘) FROM table_name;</td><td>将多个行的值组合成一个字符串</td><td>没有直接的 GROUP_CONCAT() 函数，可以使用 FOR XML PATH 来实现类似的功能。</td></tr><tr><td><strong>STD() / STDDEV() / STDDEV_POP() / STDDEV_SAMP()</strong></td><td>返回某列的总体或样本标准偏差</td><td>SELECT STD(column_name) FROM table_name;</td><td>STD() 和 STDDEV() 函数（它们是等价的）</td><td>STDDEVP()（总体标准偏差）和 STDDEV()（样本标准偏差）</td></tr><tr><td><strong>VAR_POP() / VARIANCE_POP()</strong></td><td>返回某列的总体方差</td><td>SELECT VAR_POP(column_name) FROM table_name;</td><td>VAR_POP()</td><td>VARP()（总体方差）</td></tr><tr><td><strong>VAR_SAMP() / VARIANCE_SAMP()</strong></td><td>返回某列的样本方差</td><td>SELECT VAR_SAMP(column_name) FROM table_name</td><td>VAR_SAMP()</td><td>VAR()（样本方差）</td></tr><tr><td><strong>COVAR_POP() / COVAR_SAMP()</strong></td><td>返回两个列的协方差</td><td>SELECT COVAR_POP(column1, column2) FROM table_name;</td><td>不直接支持</td><td>支持</td></tr><tr><td><strong>CORRELATION()</strong></td><td>返回两个列之间的相关系数</td><td>SELECT CORRELATION(column1, column2) FROM table_name;</td><td>不直接支持</td><td>不直接支持</td></tr><tr><td><strong>PERCENT_RANK()</strong></td><td>返回相对于其他行的行的百分比排名</td><td>SELECT PERCENT_RANK(column_name) OVER (ORDER BY column_name) FROM table_name;</td><td>不直接支持</td><td>支持</td></tr><tr><td><strong>CUME_DIST()</strong></td><td>返回相对位置的累积分布</td><td>SELECT CUME_DIST(column_name) OVER (ORDER BY column_name) FROM table_name;</td><td>不直接支持</td><td>支持</td></tr><tr><td><strong>NTILE()</strong></td><td>将有序分区中的结果行分成指定数量的近似相等的排名组</td><td>SELECT NTILE(4) OVER (ORDER BY column_name) FROM table_name;</td><td>不直接支持</td><td>支持</td></tr><tr><td><strong>LEAD() / LAG()</strong></td><td>返回指定偏移量的行的值，用于分析数据中的趋势</td><td>SELECT LEAD(column_name, 1) OVER (ORDER BY column_name) FROM table_name;  SELECT LAG(column_name, 1) OVER (ORDER BY column_name) FROM table_name;</td><td>从8.0 版本开始支持</td><td>支持</td></tr><tr><td><strong>FIRST_VALUE() / LAST_VALUE()</strong></td><td>返回指定窗口帧中的第一个或最后一个值</td><td>SELECT FIRST_VALUE(column_name) OVER (ORDER BY column_name) FROM table_name;  SELECT LAST_VALUE(column_name) OVER (ORDER BY column_name) FROM table_name;</td><td>从 8.0 版本开始支持 FIRST_VALUE() 和 LAST_VALUE() 函数</td><td>支持</td></tr><tr><td><strong>GREATEST() / LEAST()</strong></td><td>返回一组值中的最大值或最小值</td><td>SELECT GREATEST(value1, value2, …) FROM table_name;  SELECT LEAST(value1, value2, …) FROM table_name;</td><td>支持</td><td>支持</td></tr></tbody></table><p>修改某表某字段，不允许空值</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名<span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> 修改字段名 字段数据类型 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ORDER BY，GROUP BY</p><p>Oracle SQL语句组成：</p><table><thead><tr><th>数据定义语言（DDL）</th><th>数据操作语言（DML）</th><th>数据查询语言（DQL）</th><th>事物控制语言（TCL）</th><th>数据控制语言（DCL）</th></tr></thead><tbody><tr><td>CREATE（创建命令）、ALTER（修改）命令、DROP（删除）命令等</td><td>INSERT（插入）命令、UPDATE（更新）命令、DELETE（删除）命令、SELECT…FOR UPDATE（查询）等</td><td>基本查询语句、Order By子句、Group By子句等</td><td>COMMIT（提交）命令、SAVEPOINT（保存点）命令、ROLLBACK（回滚）命令</td><td>GRANT（授权）命令、REVOKE（撤销）命令</td></tr></tbody></table><p>WHERE不能接聚合函数（MAX、MIN、COUNT、SUM、AVG等）;HAVING后可以接聚合函数；</p><p>WHERE用在GROUP BY前，先过滤后分组；</p><p>HAVING用在GROUP BY之后，先分组后过滤，且使用HAVING一定要用到GRUOP BY，但用到GROUP BY 不一定有HAVING。</p><p>查询表的总行数，并命名为cnt</p><p>select count(*) (as) cnt from 表名（as可加可不加）</p><p>select count(主键或其他不为空的字段) (as) cnt from 表名（as可加可不加）</p><p>distinct 搜索去重：select distinct [列名1，列名2，…] from [表名]</p><p>检索所有列</p><p>select * from 表名</p><p>插入记录的方式汇总：</p><ul><li>普通插入（全字段）：INSERT INTO table_name VALUES (value1, value2, …)</li><li>普通插入（限定字段）：INSERT INTO table_name (column1, column2, …) VALUES (value1, value2, …)</li><li>多条一次性插入：INSERT INTO table_name (column1, column2, …) VALUES (value1_1, value1_2, …), (value2_1, value2_2, …), …</li><li>从另一个表导入：INSERT INTO table_name SELECT * FROM table_name2 [WHERE key=value]</li><li>带更新的插入：REPLACE INTO table_name VALUES (value1, value2, …) （注意这种原理是检测到主键或唯一性索引键重复就删除原记录后重新插入）</li></ul><p>修改记录的方式汇总：</p><ul><li>设置为新值：UPDATE table_name SET column_name=new_value [column_name2=new_value2][WHERE column_name3=value3]</li><li>根据已有值替换：UPDATE table_name SET key1=replace(key1, ‘查找内容’, ‘替换成内容’) [WHERE column_name3=value3]</li></ul><p>删除记录的方式汇总：</p><ul><li>根据条件删除：DELETE FROM tb_name [WHERE options][ [ ORDER BY fields ] LIMIT n ]</li><li>全部删除（表清空，包含自增计数器重置）：TRUNCATE tb_name</li></ul><p>时间差：</p><ul><li>TIMESTAMPDIFF(interval, time_start, time_end)可计算time_start-time_end的时间差，单位以指定的interval为准，常用可选：<ul><li>SECOND 秒</li><li>MINUTE 分钟（返回秒数差除以60的整数部分）</li><li>HOUR 小时（返回秒数差除以3600的整数部分）</li><li>DAY 天数（返回秒数差除以3600*24的整数部分）</li><li>MONTH 月数</li><li>YEAR 年数<br>关键词：substing,concat,upper</li></ul></li></ul><p>用法：</p><p>字符串的截取：substring(字符串，起始位置，截取字符数）<br>字符串的拼接：concat(字符串1，字符串2，字符串3,…)<br>字母大写：upper(字符串）</p><h4 id="SQL语句书写顺序"><a href="#SQL语句书写顺序" class="headerlink" title="SQL语句书写顺序"></a>SQL语句书写顺序</h4><p>select-&gt;distinct-&gt;from-&gt;join-&gt;on-&gt;where-&gt;group by-&gt;having-&gt;order by-&gt;limit</p><h4 id="SQL语句执行顺序"><a href="#SQL语句执行顺序" class="headerlink" title="SQL语句执行顺序"></a>SQL语句执行顺序</h4><p>from-&gt;on-&gt;join-&gt;where-&gt;group by（开始使用select中的别名，后面的语句中都可以使用别名）-&gt;sum、count、max、min、avg-&gt;having-&gt;select-&gt;distinct-&gt;order by-&gt;limit</p><p><code>DATEDIFF()</code> 是 SQL 中的一个函数，用于计算两个日期之间的差异</p><h4 id="DISTINCT关键字"><a href="#DISTINCT关键字" class="headerlink" title="DISTINCT关键字"></a>DISTINCT关键字</h4><p>当查询某个列时，使用 <code>DISTINCT</code> 可以确保结果集中该列的值是唯一的；也可以在查询多个列时使用 <code>DISTINCT</code>，此时 <code>DISTINCT</code> 会确保这些列的组合是唯一的。</p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li><strong>性能影响</strong>：使用 <code>DISTINCT</code> 可能会对查询性能产生影响，特别是在处理大型数据集时。因为数据库需要额外的工作来识别和消除重复的行。</li><li><strong>NULL 值</strong>：<code>DISTINCT</code> 会将 <code>NULL</code> 值视为不同的值。也就是说，如果列中有多个 <code>NULL</code> 值，<code>DISTINCT</code> 会将它们全部返回。</li><li><strong>与其他 SQL 语句结合</strong>：<code>DISTINCT</code> 可以与其他 SQL 语句（如 <code>ORDER BY</code>、<code>WHERE</code> 等）结合使用，以进一步定制查询结果。</li><li><strong>不应用于聚合函数</strong>：虽然 <code>DISTINCT</code> 用于消除重复行，但它不应该与聚合函数（如 <code>SUM()</code>, <code>COUNT()</code>, <code>AVG()</code> 等）一起用于单个列，因为这会导致错误或不可预测的结果。</li></ol><p>SUBSTRING(column_name, start, length)：这将从列的值中提取一个子字符串，从指定的起始位置开始，直到指定的长度。</p><p>UPPER(expression)：这会将字符串表达式转换为大写。</p><p>LOWER(expression)：这会将字符串表达式转换为小写。</p><p>CONCAT(string1, string2, …)：这会将两个或多个字符串连接成一个字符串。</p><h4 id="SQL-语句主要区别"><a href="#SQL-语句主要区别" class="headerlink" title="SQL 语句主要区别"></a>SQL 语句主要区别</h4><table><thead><tr><th></th><th>MySQL</th><th>SQL Server</th><th>Oracle</th></tr></thead><tbody><tr><td><strong>字符串连接</strong></td><td>使用 <code>CONCAT()</code> 函数</td><td>使用 <code>+</code> 运算符或 <code>CONCAT()</code> 函数</td><td>使用 `</td></tr><tr><td><strong>自增字段</strong></td><td>使用 <code>AUTO_INCREMENT</code> 关键字</td><td>使用 <code>IDENTITY</code> 关键字</td><td>使用序列（sequence）和触发器（trigger）</td></tr><tr><td><strong>分页查询</strong></td><td>使用 <code>LIMIT</code> 和 <code>OFFSET</code></td><td>使用 <code>OFFSET</code> 和 <code>FETCH</code></td><td>使用 <code>ROWNUM</code> 或 <code>FETCH</code> 和 <code>OFFSET</code>（在12c及更高版本中）</td></tr><tr><td><strong>日期函数</strong></td><td>使用 <code>DATE_FORMAT()</code>, <code>NOW()</code>, <code>DATEDIFF()</code> 等</td><td>使用 <code>FORMAT()</code>, <code>GETDATE()</code>, <code>DATEDIFF()</code> 等</td><td>使用 <code>TO_DATE()</code>, <code>SYSDATE</code>, <code>MONTHS_BETWEEN()</code> 等</td></tr><tr><td><strong>变量</strong></td><td>使用 <code>SET</code> 或 <code>SELECT ... INTO</code> 来定义变量</td><td>使用 <code>DECLARE</code> 来定义变量，并使用 <code>SET</code> 或 <code>SELECT</code> 来赋值</td><td>使用 <code>DECLARE</code> 来定义变量，并使用 <code>SELECT INTO</code> 来赋值</td></tr><tr><td><strong>LIMIT 返回的行数</strong></td><td>默认允许使用 <code>LIMIT</code> 返回大量行数</td><td>在较早的版本中，<code>TOP</code> 有一个默认的行数限制（如 1000 行），但在较新的版本中这个限制已被移除</td><td>没有内置的行数限制，但分页查询可能需要额外的逻辑</td></tr><tr><td><strong>数据类型</strong></td><td>使用 <code>TINYINT</code>, <code>MEDIUMINT</code>, <code>LONGTEXT</code> 等</td><td>使用 <code>TINYINT</code>, <code>INT</code>, <code>VARCHAR(MAX)</code> 等</td><td>使用 <code>NUMBER</code>, <code>VARCHAR2</code>, <code>CLOB</code></td></tr><tr><td><strong>存储过程和函数</strong></td><td>存储过程和函数的语法和调用方式在每种数据库系统中也有所不同</td><td>存储过程和函数的语法和调用方式在每种数据库系统中也有所不同</td><td>存储过程和函数的语法和调用方式在每种数据库系统中也有所不同</td></tr></tbody></table><h4 id="数据库的三个范式"><a href="#数据库的三个范式" class="headerlink" title="数据库的三个范式"></a>数据库的三个范式</h4><ol><li><strong>第一范式（1NF）</strong>：要求数据库表中的每个字段都是原子性的，即不可再分。这意味着每个字段中不能包含多个值或重复的值。如果一个字段包含多个值，应该将其拆分为多个独立的字段。第一范式确保了数据的原子性，消除了数据的重复和冗余。</li><li><strong>第二范式（2NF）</strong>：要求数据库表中的非主键字段必须完全依赖于主键。换句话说，非主键字段必须与主键直接相关，而不是间接相关。如果一个表中存在部分依赖关系，即某些字段只依赖于主键的一部分，就需要将这些字段拆分到另一个表中，以确保每个表都只包含相关的数据。第二范式消除了部分依赖，进一步减少了数据的冗余性。</li><li><strong>第三范式（3NF）</strong>：要求数据库表中的非主键字段之间不能存在传递依赖关系。传递依赖是指非主键字段依赖于其他非主键字段。如果存在传递依赖，就需要将这些字段拆分到另一个表中，以消除冗余和数据不一致性。第三范式消除了传递依赖，使得数据结构更加清晰和稳定。</li></ol><p>这三个范式的设计目的是确保数据库的简洁性、结构明晰性以及数据的一致性。遵循这些范式可以提高数据库的性能和可维护性，减少数据的冗余和不一致性。然而，需要注意的是，在某些特定场景下，为了优化查询性能或其他原因，可能会选择违反这些范式。因此，在实际应用中，需要根据具体业务需求和数据特点来权衡和选择合适的设计方案。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Aplayer歌词获取、生成、提取等</title>
      <link href="/2023/06/10/hexo-aplayer-ge-ci-huo-qu-sheng-cheng-ti-qu-deng/"/>
      <url>/2023/06/10/hexo-aplayer-ge-ci-huo-qu-sheng-cheng-ti-qu-deng/</url>
      
        <content type="html"><![CDATA[<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>这个博客的搭建主要是从<a href="https://sunhwee.com/" target="_blank" rel="noopener">洪卫の博客</a>这个大哥那里直接克隆来的，最开始接触也是朋友推荐了解了这个大佬，也从而了解到Hexo这个博客搭建程序，铺垫结束了。</p><p>此前对这个主题上的这个音乐播放器很感兴趣，包括复写这个博客的时候也是运用了<a href="https://aplayer.js.org/#/" target="_blank" rel="noopener">Aplayer</a>这个插件，并且实现了完整功能。这次重新搭建这个博客的时候，发现音乐播放没有歌词了，确实是因为json文件里没有歌词，固然也是不显示，好，现在就加上歌词。</p><hr><h4 id="分析及实现"><a href="#分析及实现" class="headerlink" title="分析及实现"></a>分析及实现</h4><p>存放音乐信息最基本的文件结构如下：</p><p><strong>/source_data/musics.json</strong></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"三十二段留言"</span><span class="token punctuation">,</span>        <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"Vicky宣宣"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://music.163.com/song/media/outer/url?id=1817160410.mp3"</span><span class="token punctuation">,</span>        <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"https://p2.music.126.net/VJvURwhahDjZNI5ppEll6Q==/109951165687836464.jpg?param=130y130"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"请你吃个冰激凌"</span><span class="token punctuation">,</span>        <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"花粥"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://music.163.com/song/media/outer/url?id=1357999885.mp3"</span><span class="token punctuation">,</span>        <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"https://p1.music.126.net/H6dt7IgvXNWhRM_w7XbcqQ==/109951163990575387.jpg?param=130y130"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"世间美好与你环环相扣"</span><span class="token punctuation">,</span>        <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"柏松"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://music.163.com/song/media/outer/url?id=1363948882.mp3"</span><span class="token punctuation">,</span>        <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"https://p1.music.126.net/DK1_4sP_339o5rowMdPXdw==/109951164071024476.jpg?param=130y130"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"海盗船长2.0"</span><span class="token punctuation">,</span>        <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"花粥 / 风子"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://music.163.com/song/media/outer/url?id=571601379.mp3"</span><span class="token punctuation">,</span>        <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"https://p1.music.126.net/OqfOJEOTevVEafeMRfpq5g==/109951163336170259.jpg?param=130y130"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://aplayer.js.org/#/home?id=lrc" target="_blank" rel="noopener">Aplayer官网文档</a>指出了三种将 LRC 传递给 APlayer的方式，总结一下大概就是要<code>[00:00.00]APlayer\n[00:04.01]is\n[00:08.02]amazing</code>这个格式内容，因此我们搞出这种格式，写入json文件中，那就直接收工了。</p><p>从网易云的请求中，我们可以直接拿到相对应的歌词文件，创建相对应的<code>.txt</code>文件，丢到我们的文件夹中就可以了。</p><p>从请求中拿到的歌词，如下：</p><pre class="line-numbers language-txt"><code class="language-txt">[00:00.00] 作词 : 风子[00:01.00] 作曲 : 风子[00:17.05]青岛又吹起了风[00:20.25]我一个人在海边的夜里发抖[00:24.92]忽然又想起我那荒唐又无聊的人生[00:31.92]我努力偏离了航道[00:35.51]终于捕捉到你的信号[00:39.06]我曾经伤害也曾经被伤害[00:42.51]现在只想停泊靠岸[00:49.45]于是我丢掉了船[00:51.80]烧掉了帆[00:54.15]砍断了我的桅杆[00:57.97]回到那片熟悉的海滩[01:01.17]却找不到属于我的港湾[01:04.73]我穿过峡谷[01:06.77]又翻过雪山[01:09.15]路过无人的戈壁滩[01:12.84]看遍人间的欢乐和悲惨[01:16.12]却找不到我的答案......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是通过Python实现<code>.txt</code>生成<code>.lrc</code>文件的具体操作：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">modify_files</span><span class="token punctuation">(</span>folder_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    oldFiles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    newFiles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 遍历文件夹下的所有文件</span>    <span class="token keyword">for</span> file_name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>folder_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> file_name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 构建原始文件和新文件的路径</span>            original_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>folder_path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>            new_file <span class="token operator">=</span> f<span class="token string">"{os.path.splitext(file_name)[0]}.lrc"</span>            new_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>folder_path<span class="token punctuation">,</span> new_file<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 检查是否存在相同命名的.lrc文件</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>new_file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                oldFiles<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_file<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token comment" spellcheck="true"># 打开原始文件和新文件，指定编码方式为UTF-8，忽略无法解码的字符</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>original_file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span> open<span class="token punctuation">(</span>new_file_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 读取原始文件内容</span>                content <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 使用正则表达式替换换行符为"\n"</span>                new_content <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">'\n'</span><span class="token punctuation">,</span> r<span class="token string">'\\n'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 将修改后的内容写入新文件</span>                f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_content<span class="token punctuation">)</span>                newFiles<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_file<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已有的.lrc文件："</span><span class="token punctuation">,</span> oldFiles<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"新生成的.lrc文件："</span><span class="token punctuation">,</span> newFiles<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用方法，传入文件夹路径</span>folder_path <span class="token operator">=</span> r<span class="token string">'C:\Users\30735\Desktop\music'</span>modify_files<span class="token punctuation">(</span>folder_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，定义了两个列表 oldFiles 和 newFiles，用于存储已有的 lrc 文件和新生成的 lrc 文件。 </p><p>然后，使用 os.listdir() 函数遍历文件夹下的所有文件，并使用 os.path.join() 函数构建原始文件和新文件的路径。 </p><p>如果原始文件的后缀名为 .txt，则检查是否存在相同命名的 .lrc 文件。如果存在，则将该文件添加到 oldFiles 列表中，并跳过该文件。 </p><p>如果不存在相同命名的 .lrc 文件，则使用 open() 函数打开原始文件和新文件，并使用 re.sub() 函数替换换行符为 “\n”。 </p><p>最后，使用 write() 函数将修改后的内容写入新文件，并将新文件添加到 newFiles 列表中。</p><hr><p>此时，我们就在目标文件夹得到了对应的<code>.lrc</code>文件。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> DOMO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Aplayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iView Select组件相关问题总结（回显、默认值等）</title>
      <link href="/2023/03/01/iview-select-zu-jian-xiang-guan-wen-ti-zong-jie-hui-xian-mo-ren-zhi-deng/"/>
      <url>/2023/03/01/iview-select-zu-jian-xiang-guan-wen-ti-zong-jie-hui-xian-mo-ren-zhi-deng/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景："><a href="#项目场景：" class="headerlink" title="项目场景："></a>项目场景：</h1><h3 id="使用iView-Select组件时，需要实现编辑修改原始数据的功能。"><a href="#使用iView-Select组件时，需要实现编辑修改原始数据的功能。" class="headerlink" title="使用iView Select组件时，需要实现编辑修改原始数据的功能。"></a>使用iView Select组件时，需要实现编辑修改原始数据的功能。</h3><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol><li>通过选中权限ID查询其相应的数据，如权限等级、父权限、名称等；</li><li>通过v-model将数据进行双向绑定，实现数据回显；</li><li>修改后，提交。</li></ol><hr><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><h3 id="一级权限应当有默认值而没有被渲染出来，如图所示。权限等级这里也是通过Select组件通过双向绑定实现了我们预期需要的效果，回显出了之前的数据，只有一级权限这里没有渲染出来。"><a href="#一级权限应当有默认值而没有被渲染出来，如图所示。权限等级这里也是通过Select组件通过双向绑定实现了我们预期需要的效果，回显出了之前的数据，只有一级权限这里没有渲染出来。" class="headerlink" title="一级权限应当有默认值而没有被渲染出来，如图所示。权限等级这里也是通过Select组件通过双向绑定实现了我们预期需要的效果，回显出了之前的数据，只有一级权限这里没有渲染出来。"></a>一级权限应当有默认值而没有被渲染出来，如图所示。权限等级这里也是通过Select组件通过双向绑定实现了我们预期需要的效果，回显出了之前的数据，只有一级权限这里没有渲染出来。</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/87c4abf0fc9d471bb27fbfe1cf9de6dd.png" alt="在这里插入图片描述"><br>代码如下:</p><pre><code>&lt;Modal v-model="editModel" title="修改权限相关信息" @on-ok="editInfo" @on-cancel="editModalClosed"&gt;      &lt;Form ref="editFormRef" :model="editForm" :rules="editFormRules" :label-width="70"&gt;        &lt;FormItem prop="level" label="权限等级"&gt;          &lt;Select v-model="editForm.level"&gt;            &lt;Option value="1"&gt;一级&lt;/Option&gt;            &lt;Option value="2"&gt;二级&lt;/Option&gt;          &lt;/Select&gt;        &lt;/FormItem&gt;        &lt;FormItem prop="parent_id" label="一级权限"&gt;          &lt;Select v-model="editForm.parent_id"&gt;            &lt;!-- 回显需传入number类型的ID --&gt;            &lt;Option :value="item.id" v-for="item in firstRights" :key="item.id"&gt;{{item.name}}&lt;/Option&gt;          &lt;/Select&gt;        &lt;/FormItem&gt;        &lt;FormItem prop="name" label="权限名称"&gt;          &lt;Input v-model="editForm.name" clearable&gt;&lt;/Input&gt;        &lt;/FormItem&gt;        &lt;FormItem prop="path" label="页面路径"&gt;          &lt;Input v-model="editForm.path"&gt;&lt;/Input&gt;        &lt;/FormItem&gt;      &lt;/Form&gt;    &lt;/Modal&gt;</code></pre><p>查询该条权限请求返回的数据如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/b19ebdca0e4142ec9467b5fc15db2ae8.png" alt="在这里插入图片描述"></p><h3 id="从上图我们可以发现，level和parent-id这个字段是String类型的，且打印出来显示也是String类型的"><a href="#从上图我们可以发现，level和parent-id这个字段是String类型的，且打印出来显示也是String类型的" class="headerlink" title="从上图我们可以发现，level和parent_id这个字段是String类型的，且打印出来显示也是String类型的"></a>从上图我们可以发现，level和parent_id这个字段是String类型的，且打印出来显示也是String类型的</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/1f1a4823cb3e44bab5afafea228feb36.png" alt="在这里插入图片描述"></p><hr><h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><h3 id="一级权限这里我是通过v-if将后台返回的数据渲染在Select组件中，通过去查看“firstRights”这里的数据发现，这里传入组件中的ID是int类型的，打印的数据类型是number，因此前后两个ID对不上，导致数据没有实现双向绑定，如下图所示："><a href="#一级权限这里我是通过v-if将后台返回的数据渲染在Select组件中，通过去查看“firstRights”这里的数据发现，这里传入组件中的ID是int类型的，打印的数据类型是number，因此前后两个ID对不上，导致数据没有实现双向绑定，如下图所示：" class="headerlink" title="一级权限这里我是通过v-if将后台返回的数据渲染在Select组件中，通过去查看“firstRights”这里的数据发现，这里传入组件中的ID是int类型的，打印的数据类型是number，因此前后两个ID对不上，导致数据没有实现双向绑定，如下图所示："></a>一级权限这里我是通过v-if将后台返回的数据渲染在Select组件中，通过去查看“firstRights”这里的数据发现，这里传入组件中的ID是int类型的，打印的数据类型是number，因此前后两个ID对不上，导致数据没有实现双向绑定，如下图所示：</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/b97f631cfdce43c8b6225c2aa216196e.png" alt="在这里插入图片描述"></p><hr><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h3 id="官方给出的文档很简单，只说了这里的value可以是string也可以number，所以一开始就忽略了这里问题。"><a href="#官方给出的文档很简单，只说了这里的value可以是string也可以number，所以一开始就忽略了这里问题。" class="headerlink" title="官方给出的文档很简单，只说了这里的value可以是string也可以number，所以一开始就忽略了这里问题。"></a>官方给出的文档很简单，只说了这里的value可以是string也可以number，所以一开始就忽略了这里问题。</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/a74fa26b2b0e4363a06928222e881c8e.png" alt="在这里插入图片描述"></p><h3 id="后来也是各种百度，有的解决方案就太复杂了，最后我都没采纳，最后提取了一个字眼–数据类型是否不一致，可能导致这一问题，最后发现，确实也是。"><a href="#后来也是各种百度，有的解决方案就太复杂了，最后我都没采纳，最后提取了一个字眼–数据类型是否不一致，可能导致这一问题，最后发现，确实也是。" class="headerlink" title="后来也是各种百度，有的解决方案就太复杂了，最后我都没采纳，最后提取了一个字眼–数据类型是否不一致，可能导致这一问题，最后发现，确实也是。"></a>后来也是各种百度，有的解决方案就太复杂了，最后我都没采纳，最后提取了一个字眼–数据类型是否不一致，可能导致这一问题，最后发现，确实也是。</h3><h3 id="最后解决方案就是，可以在请求一级权限的时候，将ID转换为string类型的数据，也可以在请求单条数据的时候，将ID的类型设置为number。"><a href="#最后解决方案就是，可以在请求一级权限的时候，将ID转换为string类型的数据，也可以在请求单条数据的时候，将ID的类型设置为number。" class="headerlink" title="最后解决方案就是，可以在请求一级权限的时候，将ID转换为string类型的数据，也可以在请求单条数据的时候，将ID的类型设置为number。"></a>最后解决方案就是，可以在请求一级权限的时候，将ID转换为string类型的数据，也可以在请求单条数据的时候，将ID的类型设置为number。</h3><p>代码如下：</p><pre><code>        console.log(res.entity.data.parent_id)        // 将父级 ID 由 String 转 Number，通过parseInt        this.editForm.parent_id = parseInt(res.entity.data.parent_id)        console.log(typeof(this.editForm.parent_id))</code></pre><h3 id="实现效果如下："><a href="#实现效果如下：" class="headerlink" title="实现效果如下："></a>实现效果如下：</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/776526c9d43d4a5b8022064a51d8c455.png" alt="在这里插入图片描述"></p><h3 id="最后附上一下午的的搜索查看的记录，呜呜呜！！！"><a href="#最后附上一下午的的搜索查看的记录，呜呜呜！！！" class="headerlink" title="最后附上一下午的的搜索查看的记录，呜呜呜！！！"></a>最后附上一下午的的搜索查看的记录，呜呜呜！！！</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/f9d694b17cc74fe187b0f06ce183dd04.png" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《软件设计师教程》知识点总结（更新中）</title>
      <link href="/2023/02/15/ruan-jian-she-ji-shi-jiao-cheng-zhi-shi-dian-zong-jie-geng-xin-zhong/"/>
      <url>/2023/02/15/ruan-jian-she-ji-shi-jiao-cheng-zhi-shi-dian-zong-jie-geng-xin-zhong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、计算机系统知识"><a href="#一、计算机系统知识" class="headerlink" title="一、计算机系统知识"></a>一、计算机系统知识</h1><h2 id="1-1-计算机系统的基础知识"><a href="#1-1-计算机系统的基础知识" class="headerlink" title="1.1 计算机系统的基础知识"></a>1.1 计算机系统的基础知识</h2><h3 id="1-1-1-计算机系统硬件基本组成"><a href="#1-1-1-计算机系统硬件基本组成" class="headerlink" title="1.1.1 计算机系统硬件基本组成"></a>1.1.1 计算机系统硬件基本组成</h3><p>计算机的基本硬件系统：运算器、控制器、存储器、输入设备、输出设备；</p><h3 id="1-1-2-中央处理单元（CPU）"><a href="#1-1-2-中央处理单元（CPU）" class="headerlink" title="1.1.2 中央处理单元（CPU）"></a>1.1.2 中央处理单元（CPU）</h3><p>中央处理单元：运算器、控制器等部件被集成在一起统称为中央处理单元（Center Processing Unit，CPU）；</p><h4 id="1、CPU的功能"><a href="#1、CPU的功能" class="headerlink" title="1、CPU的功能"></a>1、CPU的功能</h4><ol><li>程序控制</li><li>操作控制</li><li>时间控制</li><li>数据处理</li></ol><h4 id="2、CPU的组成"><a href="#2、CPU的组成" class="headerlink" title="2、CPU的组成"></a>2、CPU的组成</h4><p>CPU主要由运算器、控制器、寄存器组和内部总线等组件组成；</p><ol><li><p>运算器</p><p>运算器由<strong>算术逻辑单元</strong>（Arithmetic and Logic Unit，ALU）、<strong>累加寄存器</strong>、<strong>数据缓冲寄存器</strong>和<strong>状态条件寄存器</strong>等组成，是数据加工处理部件，用于完成各种算术和逻辑运算（只能完成计算），所有的操作<strong>由控制器发出控制信号指挥</strong>，故为<strong>执行组件</strong>；</p><p>功能：</p><ol><li>执行所有的算术运算，如加、减、乘、除等基础运算及附加运算；</li><li>执行所有的逻辑运算并进行逻辑测试，如与、或、非、零值测试或两个值的比较等；</li></ol><p>各组成部件的功能：</p><ol><li><p>算术逻辑单元（ALU）</p><p>负责<strong>处理数据</strong>，实现对数据的算术运算和逻辑运算；</p></li><li><p>累加寄存器（AC）</p><p>简称累加器，为算术逻辑单元（ALU）提供<strong>工作区</strong>，运算器中至少有一个累加器；</p></li><li><p>数据缓冲寄存器（DR）</p><p>作为CPU和内存、外部设备之间数据传送的<strong>中转站</strong>，在操作速度上的缓冲；</p><p>对内存存储器进行读/写操作时，用DR暂时存放读/写的一条指令或一个数据字，将不同时间段的读/写数据隔离；</p></li><li><p>状态条件寄存器（PSW）</p><p>PSW保存由算术指令和逻辑指令运行或测试的<strong>结果</strong>建立的各种条件码内容，主要分为<strong>状态标志</strong>和<strong>控制标志</strong>；</p><p>通常，一个算术操作产生一个运算结果，而一个逻辑操作产生一个判决；</p></li></ol></li><li><p>控制器</p><p>用于控制整个CPU的工作，决定了计算机运行过程的自动化（程序的正确执行、异常事件的处理）；</p><p>一般包括指令控制逻辑、时序控制逻辑、总线控制逻辑和中断控制逻辑等；</p><p><strong>指令控制逻辑</strong>要完成取指令、分析指令和执行指令的操作，过程：取指令=&gt;指令译码=&gt;按指令操作码执行=&gt;形成下一条指令地址=&gt;等步骤；</p><ol><li><p>指令寄存器（IR）</p><p>CPU执行一条指令时，先从内存储器取到缓冲寄存器（DR），在送入指令寄存器（IR）暂存，指令译码器（ID）通过指令寄存器（IR）中的内容产生各种微操作指令，由此控制其他组成组件工作，完成相关功能；</p></li><li><p>程序计数器（PC）</p><p>具有寄存信息、计数两种功能，又称指令计数器；</p><p>程序的执行分两种情况：顺序执行、转移执行；</p></li><li><p>地址寄存器（AR）</p><p>保存当前CPU所访问的内存单元的地址；</p><p>由于内存和CPU操作速度上的差异，所以地址寄存器要保存地址信息知道内存的读/写操作完成；</p></li><li><p>指令译码器（ID）</p><p>指令包含：操作码、地址码；</p><p>指令译码器对指令中的操作码字段进行分析解释，识别指令的操作，向操作控制器发出操作信号，控制各部件工作，完成所需功能；</p></li></ol><p><strong>时序控制逻辑</strong>要为每条指令按时间顺序提供应有的控制信号；</p><p><strong>总线控制逻辑</strong>是为多个功能组件服务的信息通路的控制电路；</p><p><strong>中断控制逻辑</strong>用于控制各种中断请求，并根据优先级的高低对中断请求进行排队，逐个交给CPU；</p></li><li><p>寄存器组</p><p>寄存器组可分为：专用寄存器（如运算器和控制器中的寄存器，作用固定）、通用寄存器（用途广泛）；</p></li></ol><h4 id="3、多核CPU"><a href="#3、多核CPU" class="headerlink" title="3、多核CPU"></a>3、多核CPU</h4><h3 id="1-1-3-数据表示"><a href="#1-1-3-数据表示" class="headerlink" title="1.1.3 数据表示"></a>1.1.3 数据表示</h3><p>二进制计数制</p><p>原码、反码、补码、移码（小数无移码）</p><p>原码表示法中，最高位是符号位，0表示正号，1表示负号，其余的n-1位表示数值的绝对值；</p><table><thead><tr><th align="center"></th><th align="center">+1</th><th align="center">-1</th><th align="center">+0.5</th><th align="center">-0.5</th><th align="center">+0</th><th align="center">-0</th></tr></thead><tbody><tr><td align="center">原码</td><td align="center">00000001</td><td align="center">10000001</td><td align="center">0.1000000</td><td align="center">1.1000000</td><td align="center">00000000</td><td align="center">10000000</td></tr><tr><td align="center">反码</td><td align="center">00000001</td><td align="center">11111110</td><td align="center">0.1000000</td><td align="center">1.0111111</td><td align="center">00000000</td><td align="center">11111111</td></tr><tr><td align="center">补码</td><td align="center">00000001</td><td align="center">11111111</td><td align="center">0.1000000</td><td align="center">1.1000000</td><td align="center">00000000</td><td align="center">00000000</td></tr><tr><td align="center">移码</td><td align="center">10000001</td><td align="center">01111111</td><td align="center">无</td><td align="center">无</td><td align="center">10000000</td><td align="center">10000000</td></tr></tbody></table><ol><li>一个<strong>正数的原码、反码、补码相同</strong>；一个<strong>正数的移码</strong>除最高位与其原码、反码、补码最高位不同外，其他位都相同（<strong>即其原码最高位+1</strong>）；</li><li><strong>一个负数的原码</strong>除最高位与其绝对值的原码不同外，其他位都相同（<strong>即其绝对值的原码最高位+1</strong>）；</li><li><strong>一个负数的反码</strong>与其绝对值的原码、反码每一位都不相同，（<strong>即绝对值反码每一位取反</strong>）；</li><li><strong>一个负数的补码等于其反码末尾+1</strong>；</li><li>除小数外，<strong>任何一个数的补码符号位取反即是相对应的移码</strong>；</li></ol><h3 id="1-1-4-校验码"><a href="#1-1-4-校验码" class="headerlink" title="1.1.4 校验码"></a>1.1.4 校验码</h3><ol><li>奇偶校验码<ol><li>水平奇偶校验码</li><li>垂直奇偶校验码</li><li>水平垂直校验码</li></ol></li><li>海明码</li><li>循环冗余校验码</li></ol><h1 id="二、程序设计语言基础知识"><a href="#二、程序设计语言基础知识" class="headerlink" title="二、程序设计语言基础知识"></a>二、程序设计语言基础知识</h1><h1 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a>三、数据结构</h1><h1 id="四、操作系统知识"><a href="#四、操作系统知识" class="headerlink" title="四、操作系统知识"></a>四、操作系统知识</h1><h1 id="五、软件工程基础知识"><a href="#五、软件工程基础知识" class="headerlink" title="五、软件工程基础知识"></a>五、软件工程基础知识</h1><h1 id="六、结构化开发方法"><a href="#六、结构化开发方法" class="headerlink" title="六、结构化开发方法"></a>六、结构化开发方法</h1><h1 id="七、面向对象技术"><a href="#七、面向对象技术" class="headerlink" title="七、面向对象技术"></a>七、面向对象技术</h1><h1 id="八、算法设计与分析"><a href="#八、算法设计与分析" class="headerlink" title="八、算法设计与分析"></a>八、算法设计与分析</h1><h2 id="8-1-算法设计与分析的基本概念"><a href="#8-1-算法设计与分析的基本概念" class="headerlink" title="8.1 算法设计与分析的基本概念"></a>8.1 算法设计与分析的基本概念</h2><h3 id="8-1-1-算法"><a href="#8-1-1-算法" class="headerlink" title="8.1.1 算法"></a>8.1.1 算法</h3><p>算法一般具有五个特性：<strong>有穷性、确定性、可行性、输入、输出</strong>；</p><h2 id="8-1-2-算法设计"><a href="#8-1-2-算法设计" class="headerlink" title="8.1.2 算法设计"></a>8.1.2 算法设计</h2><p>好的算法应考虑：<strong>正确性、可读性、健壮性、高效性</strong>等；</p><p>常用算法设计技术包括：<strong>分治法、动态规划法、贪心法、回溯法、分支限界法、概率算法和近似算法</strong>等；</p><h2 id="8-1-3-算法分析"><a href="#8-1-3-算法分析" class="headerlink" title="8.1.3 算法分析"></a>8.1.3 算法分析</h2><h2 id="8-1-4-算法的表示"><a href="#8-1-4-算法的表示" class="headerlink" title="8.1.4 算法的表示"></a>8.1.4 算法的表示</h2><h2 id="8-2-算法分析基础"><a href="#8-2-算法分析基础" class="headerlink" title="8.2 算法分析基础"></a>8.2 算法分析基础</h2><h3 id="8-2-1-时间复杂度"><a href="#8-2-1-时间复杂度" class="headerlink" title="8.2.1 时间复杂度"></a>8.2.1 时间复杂度</h3><h3 id="8-2-2-渐进符号"><a href="#8-2-2-渐进符号" class="headerlink" title="8.2.2 渐进符号"></a>8.2.2 渐进符号</h3><h3 id="8-2-3-递归式"><a href="#8-2-3-递归式" class="headerlink" title="8.2.3 递归式"></a>8.2.3 递归式</h3><h2 id="8-3-分治法"><a href="#8-3-分治法" class="headerlink" title="8.3 分治法"></a>8.3 分治法</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>递归的两个基本要素：</p><p>边界条件</p><p>递归模式</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>一般来说，分治算法在每一层递归都有三个步骤：</p><p>分解</p><p>求解</p><p>合并</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>归并排序</p><h2 id="8-4-动态规划法"><a href="#8-4-动态规划法" class="headerlink" title="8.4 动态规划法"></a>8.4 动态规划法</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>找出最优解的性质，并刻画其结构特征</p><p>递归定义最优解的值</p><p>自底向上算出最优值</p><p>构造最优解</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>0-1背包问题</p><h2 id="8-5-贪心法"><a href="#8-5-贪心法" class="headerlink" title="8.5 贪心法"></a>8.5 贪心法</h2><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>活动选择问题</p><p>背包问题</p><h2 id="8-6-回溯法"><a href="#8-6-回溯法" class="headerlink" title="8.6 回溯法"></a>8.6 回溯法</h2><p><strong>以深度优先的方式系统地搜索问题的解的方法称为回溯法。</strong></p><p><strong>界限函数的设计是回溯法的一个核心问题；</strong></p><h2 id="8-7-分支限界法"><a href="#8-7-分支限界法" class="headerlink" title="8.7 分支限界法"></a>8.7 分支限界法</h2><h2 id="8-8-概率算法"><a href="#8-8-概率算法" class="headerlink" title="8.8 概率算法"></a>8.8 概率算法</h2><h2 id="8-9-近似算法"><a href="#8-9-近似算法" class="headerlink" title="8.9 近似算法"></a>8.9 近似算法</h2><h2 id="8-10-数据挖掘算法"><a href="#8-10-数据挖掘算法" class="headerlink" title="8.10 数据挖掘算法"></a>8.10 数据挖掘算法</h2><h2 id="8-11-智能优化算法"><a href="#8-11-智能优化算法" class="headerlink" title="8.11 智能优化算法"></a>8.11 智能优化算法</h2><h4 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h4><p>快速排序算法是一种经典的排序算法，其基本思想是选择一个基准元素(通常选择第一个元素或者最后一个元素)，通过一趟排序将待排序序列分成两部分，一部分比基准元素小，一部分大于等于基准元素，此时基准元素在其排好序后的正确位置；然后再递归地排序划分的两部分，因此本质上快速排序是一种<strong>分治算法</strong>。<strong>由于在排序的过程中，各元素与基准元素比较大小，若小于基准元素则与基准元素交换位置，因此该算法是不稳定的排序算法。</strong>当每一趟排序进行后，选择的基准元素恰好最大或者最小时，就把序列分成极端不均衡的两部分，即一部分为空，另一部分为待排序序列的元素个数减1，此时算法处于最坏情况，其时间复杂度为O(n2)。当输入数据基本有序或者所有元素值相等时，不论选择第一个元素还是最后一个元素作为基准元素，都恰好把序列分成极端不均衡的两部分，快速排序算法具有最坏情况下的时间复杂度。</p><ol><li>完全二叉树<ul><li><strong>描述</strong>：完全二叉树是深度为k的，有n个节点的二叉树，其特点是叶子节点只可能出现在层序最大的两层上，并且某个节点的左分支下子孙的最大层序与右分支下子孙的最大层序相等或大1。每个节点最多只能有两棵子树，且有左右之分。</li><li><strong>举例</strong>：考虑一个深度为3的完全二叉树，它有7个节点。按照完全二叉树的定义，这些节点会被排列成三层，第一层1个节点（根节点），第二层2个节点（左右子节点），第三层4个节点（填满最后一层）。</li></ul></li><li>线索二叉树<ul><li><strong>描述</strong>：线索二叉树是对普通二叉树进行线索化得到的。线索化的过程是在二叉树的结点上加上线索，即利用二叉链存储结构中的空链域来存放前驱和后继结点的指针。通过线索化，可以方便地实现二叉树的遍历，提高了遍历速度并节约了存储空间。</li><li><strong>举例</strong>：假设有一个简单的二叉树，其节点有空链域。通过线索化，我们可以在这些空链域中存储指向前驱和后继节点的指针，从而方便地按某种顺序（如中序）遍历整棵树。</li></ul></li><li>二叉排序树（二叉查找树）<ul><li><strong>描述</strong>：二叉排序树是一种特殊的二叉树，其中左子树上所有结点的值均小于根节点的值，右子树上所有结点的值均大于根节点的值。它的主要优势在于可以快速地（二分查找）查询、插入和删除某个特定值的节点。</li><li><strong>举例</strong>：假设我们有一个包含整数的二叉排序树，例如{4, 2, 6, 1, 3, 5, 7}。按照二叉排序树的规则，这些数字会被组织成一个树形结构，使得对于任何节点，其左子节点的值都小于它，右子节点的值都大于它。</li></ul></li><li>最优二叉树（哈夫曼树）<ul><li><strong>描述</strong>：最优二叉树或哈夫曼树是在给定权值序列的情况下构造的带权路径长度最短的二叉树。它通常用于数据压缩和编码，通过给定权值（如字符频率）构造出最优的树形结构，使得编码后的数据尽可能小。</li><li><strong>举例</strong>：假设我们有4个字符和它们的频率（权值）：A(5), B(9), C(12), D(13)。根据哈夫曼树的构造算法，我们首先选择频率最低的两个字符（A和B）作为子节点构造一个新的内部节点（频率为14），然后重复这个过程，直到只剩下一个节点。最终得到的哈夫曼树将用于编码这些字符，以实现最优的压缩效果。</li></ul></li></ol><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ol><li><strong>直接插入排序</strong>：<ul><li><strong>原理</strong>：每次将一个待排序的记录，按其顺序码大小插入到前面已经排序好的子序列的合适位置，直到全部插入排序完成为止。</li><li><strong>举例</strong>：对于序列[3，1，4，1，5，9，6，5]，初始时认为第一个元素已排序。然后，将第二个元素1与第一个元素3比较，发现1更小，于是将3后移，1插入到前面。继续这个过程，直到所有元素都排序完毕。</li><li><strong>时间复杂度</strong>：O(n^2)，其中n是待排序元素的数量。</li></ul></li><li><strong>冒泡排序</strong>：<ul><li><strong>原理</strong>：通过重复地遍历待排序的序列，比较每对相邻的元素，如果它们的顺序错误就把它们交换过来。这个过程会重复进行，直到没有更多的元素需要交换，也就是说该序列已经排序完成。</li><li><strong>举例</strong>：对于序列[3，1，4，1，5，9，6，5]，首先比较第一对元素(3和1)，交换它们的位置。接着比较第二对元素(1和4)，不需要交换。然后比较第三对元素(4和1)，再次交换。这个过程持续进行，直到整个序列有序。</li><li><strong>时间复杂度</strong>：在最好情况下为O(n)，最坏情况下为O(n^2)。</li></ul></li><li><strong>选择排序</strong>：<ul><li><strong>原理</strong>：首先在未排序序列中找到最小（或最大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（或最大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</li><li><strong>举例</strong>：对于序列[3，1，4，1，5，9，6，5]，首先在未排序部分找到最小的元素1，将其与第一个位置的元素交换。然后在剩余未排序部分继续找到最小的元素1，与第二个位置的元素交换。这个过程持续进行，直到所有元素排序完毕。</li><li><strong>时间复杂度</strong>：O(n^2)。</li></ul></li><li><strong>快速排序</strong>：<ul><li><strong>原理</strong>：通过选择一个“基准”元素，将序列分为两部分，其中一部分的所有元素都比基准元素小，另一部分的所有元素都比基准元素大。然后递归地对这两部分进行快速排序。</li><li><strong>举例</strong>：对于序列[3，1，4，1，5，9，6，5]，选择第一个元素3作为基准。将比3小的元素移到其左边，比3大的元素移到其右边。然后递归地对左右两部分进行快速排序。</li><li><strong>时间复杂度</strong>：平均情况下为O(n log n)，最坏情况下为O(n^2)。</li></ul></li><li><strong>归并排序</strong>：<ul><li><strong>原理</strong>：采用分治策略，将已有序的子序列合并，得到完全有序的序列。即先使每个子序列有序，再使子序列段间有序。</li><li><strong>举例</strong>：对于序列[3，1，4，1，5，9，6，5]，首先将其分成两个子序列[3，1，4，1]和[5，9，6，5]，然后分别对这两个子序列进行归并排序。排序完成后，再将这两个有序子序列合并成一个有序序列。</li><li><strong>时间复杂度</strong>：O(n log n)。</li></ul></li></ol><h1 id="九、数据库技术基础"><a href="#九、数据库技术基础" class="headerlink" title="九、数据库技术基础"></a>九、数据库技术基础</h1><h3 id="9-9-1-数据库与数据库系统"><a href="#9-9-1-数据库与数据库系统" class="headerlink" title="9.9.1 数据库与数据库系统"></a>9.9.1 数据库与数据库系统</h3><p>数据库系统（DataBase System，DBS）是一个采用了数据库技术，有组织地、动态地存储大量相关数据，方便多用户访问的计算机系统。</p><p>DBS由数据库、硬件、软件和人员组成。</p><ol><li><p>数据库</p><p>数据库（DataBase，DB）是统一管理的、长期存储在计算机内的、有组织的相关数据的集合。</p><p>特点：数据间联系密切、冗余度小、独立性高、易拓展，并且可为各类用户共享。</p></li><li><p>硬件</p></li><li><p>软件</p><p>数据库管理系统简称DBMS。</p><p>主要功能包括：数据定义、数据操作、数据库运行管理、数据库的建立与维护。</p></li><li><p>人员</p><p>主要有四类：系统分析员和数据库设计人员、应用程序员、最终用户、数据库管理员（Data Base Administrator，DBA）</p></li></ol><h3 id="9-1-2-数据库管理系统的功能"><a href="#9-1-2-数据库管理系统的功能" class="headerlink" title="9.1.2 数据库管理系统的功能"></a>9.1.2 数据库管理系统的功能</h3><p>数据库管理系统主要实现对共享数据有效地组织、管理和存取，具有以下六个方面的功能：</p><ol><li>数据定义</li><li>数据库操作</li><li>数据库运行管理</li><li>数据的组织、存储和管理</li><li>数据库的建立和维护</li><li>其他功能</li></ol><h3 id="9-1-3-数据库管理系统的特征及分类"><a href="#9-1-3-数据库管理系统的特征及分类" class="headerlink" title="9.1.3 数据库管理系统的特征及分类"></a>9.1.3 数据库管理系统的特征及分类</h3><ol><li>DBMS的特征</li><li>DBMS的分类<ol><li>关系型数据库系统</li><li>面向对象的数据库系统</li><li>对象关系数据库系统</li></ol></li></ol><h3 id="9-1-4-数据库系统的体系结构"><a href="#9-1-4-数据库系统的体系结构" class="headerlink" title="9.1.4 数据库系统的体系结构"></a>9.1.4 数据库系统的体系结构</h3><ol><li>集中式数据库系统</li><li>客户端/服务器结构</li><li>并行数据库系统</li><li>分布式数据库系统</li></ol><p>为了保证数据库中数据的安全可靠和正确有效，数据库管理系统(DBMS)提供数据库恢复、并发控制、数据完整性保护与数据安全性保护等功能。</p><p>标准SQL对数据库对象(基本表、索引和视图等)的创建、修改和删除定义了一组操作分别为CREATE、ALTER和DROP；对基本表和视图中数据的插入、删除和修改定义了操作分别为INSERT、DELETE和UPDATE。</p><h1 id="十、网络与信息安全基础知识"><a href="#十、网络与信息安全基础知识" class="headerlink" title="十、网络与信息安全基础知识"></a>十、网络与信息安全基础知识</h1><h2 id="10-1-网络概述"><a href="#10-1-网络概述" class="headerlink" title="10.1 网络概述"></a>10.1 网络概述</h2><h3 id="10-1-1-计算机网络的概念"><a href="#10-1-1-计算机网络的概念" class="headerlink" title="10.1.1 计算机网络的概念"></a>10.1.1 计算机网络的概念</h3><p>目前人们已公认的有关<strong>计算机网络的定义</strong>是：利用通信设备和线路将地理位置分散、功能独立的自主计算机系统或由计算机控制的外部设备连接起来，在网络操作系统的控制下，按照约定的通信协议进行信息交换，实现资源（硬件资源（CPU、大容量的磁盘、光盘以及打印机等）、软件资源（语言编译器、文本编辑器、各种软件工具和应用程序等））共享的系统。</p><h4 id="1、计算机网络的发展（点、线、面、体）"><a href="#1、计算机网络的发展（点、线、面、体）" class="headerlink" title="1、计算机网络的发展（点、线、面、体）"></a>1、计算机网络的发展（点、线、面、体）</h4><ol><li>具有通信功能的单机系统（终端-计算机网络）</li><li>具有通信功能的多机系统（计算机-计算机网络）</li><li>以共享资源为目的的计算机网络</li><li>以局域网及因特网为支撑环境的分布式计算机系统</li></ol><h4 id="2、计算机网络的功能"><a href="#2、计算机网络的功能" class="headerlink" title="2、计算机网络的功能"></a>2、计算机网络的功能</h4><ol><li><p>数据通信</p></li><li><p>资源共享</p><p>提高系统资源的利用率，软件资源共享、硬件资源共享；</p></li><li><p>负载均衡</p><p>多台计算机相互协作，均衡负载、共同完成任务，某台计算机任务过重时，可将任务分配给其余空闲的多台计算机；</p></li><li><p>高可靠性</p><p>避免单机无后备的情况，某台计算机出现故障后，其任务可由其他计算机代为处理；</p></li></ol><h3 id="10-1-2-计算机网络的分类"><a href="#10-1-2-计算机网络的分类" class="headerlink" title="10.1.2 计算机网络的分类"></a>10.1.2 计算机网络的分类</h3><ol><li><p>局域网（Local Area Network，LAN）</p><p>局域网指传输距离有限、传输速度较高、以共享网络资源为目的的网络系统；</p><p>特点：</p><ol><li>分布范围有限；（园区网、校园网）</li><li>有较高的通信带宽，数据传输率高；（1Mbps&lt;=      &lt;=1000Mbps）</li><li>数据传输可靠，误码率低；（百万分之一到万分之一）</li><li>通常采用同轴电缆或双绞线作为传输介质，跨楼宇时使用光纤；</li><li>拓扑结构简单。简介，大多采用总线、星型和环形等，系统容易配置和管理；（网络上的计算机一般多采用多路控制访问技术或令牌技术访问信道）</li><li>网络的控制一般趋向于分布式，从而减少了对某个结点的依赖，避免并减少了一个结点故障对整个网络的影响；</li><li>通常，网络归单一组织所拥有和使用，不受任何公共网络管理机构</li></ol></li><li><p>城域网</p></li><li><p>广域网</p></li></ol><h3 id="10-1-3-网络的拓扑结构"><a href="#10-1-3-网络的拓扑结构" class="headerlink" title="10.1.3 网络的拓扑结构"></a>10.1.3 网络的拓扑结构</h3><ol><li>总线型结构</li><li>星型结构</li><li>环形结构</li><li>树形结构</li><li>分布式结构</li></ol><h3 id="10-1-4-ISO-OSI网络体系结构"><a href="#10-1-4-ISO-OSI网络体系结构" class="headerlink" title="10.1.4 ISO/OSI网络体系结构"></a>10.1.4 ISO/OSI网络体系结构</h3><h1 id="十一、标准化和软件知识产权基础问题"><a href="#十一、标准化和软件知识产权基础问题" class="headerlink" title="十一、标准化和软件知识产权基础问题"></a>十一、标准化和软件知识产权基础问题</h1><h4 id="软件许可"><a href="#软件许可" class="headerlink" title="软件许可"></a>软件许可</h4><p>软件许可使用一般有独占许可使用、独家许可使用和普通许可使用三种形式。</p><p>独占许可使用，许可的是专有使用权，实施独占许可使用后，软件著作权人不得将软件使用权授予第三方，软件著作权人自己不能使用该软件；</p><p>独家许可使用，许可的是专有使用权，实施独家许可使用后，软件著作权人不得将软件使用权授予第三方，软件著作权人自己可以使用该软件；</p><p>普通许可使用，许可的是非专有使用权，实施普通许可使用后，软件著作权人可以将软件使用权授予第三方，软件著作权人自己可以使用该软件。</p><h1 id="十二、软件系统分析与设计"><a href="#十二、软件系统分析与设计" class="headerlink" title="十二、软件系统分析与设计"></a>十二、软件系统分析与设计</h1><p> 模块独立性是创建良好设计的一个重要原则，一般采用模块间的耦合和模块的内聚两个准则来进行度量。耦合是模块之间的相对独立性的度量，模块之间的连接越紧密，联系越多，耦合性就越高，而其模块独立性就越弱。</p><p>一般来说，模块之间的耦合有7种类型，根据耦合性从低到高为非直接耦合、数据耦合、标记耦合、控制耦合、外部耦合、公共耦合和内容耦合。</p><p>如果一个模块访问另一个模块时，彼此之间是通过数据参数(不是控制参数、公共数据结构或外部变量)来交换输入、输出信息的，则称这种耦合为数据耦合；如果一组模块通过数据结构本身传递，则称这种耦合为标记耦合；若一组模块都访问同一个公共数据环境，则它们之间的耦合就称为公共耦合；若一个模块直接访问另一个模块的内部数据、一个模块不通过正常入口转到另一个模块内部、两个模块有一部分程序代码重叠或者一个模块有多个入口，上述几个情形之一发生则说明两个模块之间就发生了内容耦合。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
          <category> 技能提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件设计师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 数组与字符串的相互转换</title>
      <link href="/2022/10/31/javascript-shu-zu-yu-zi-fu-chuan-de-xiang-hu-zhuan-huan/"/>
      <url>/2022/10/31/javascript-shu-zu-yu-zi-fu-chuan-de-xiang-hu-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h4 id="一、数组转字符串"><a href="#一、数组转字符串" class="headerlink" title="一、数组转字符串"></a>一、数组转字符串</h4><h5 id="1、array-join-separator"><a href="#1、array-join-separator" class="headerlink" title="1、array.join(separator)"></a>1、array.join(separator)</h5><p>可以通过自定义分隔符（如空格等）来分隔数组编变成字符串，默认以逗号分隔</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 数组转换为字符串</span>var arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// array.join(separator)</span><span class="token comment" spellcheck="true">// separator 可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</span><span class="token comment" spellcheck="true">// join() 把数组的所有元素放入一个字符串 join()可选择分隔符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1,2,3,4</span>var arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'symbol'</span><span class="token punctuation">,</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span> <span class="token string">'null'</span><span class="token punctuation">,</span> <span class="token string">'underfind'</span><span class="token punctuation">,</span> <span class="token string">'object'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// join()可选择分隔符 逗号分隔 arr4.join() 等价于 arr4.join(',')</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// string,number,symbol,boolean,null,underfind,object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// string,number,symbol,boolean,null,underfind,object</span><span class="token comment" spellcheck="true">// 空格分隔</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// string number symbol boolean null underfind object</span><span class="token comment" spellcheck="true">// and 分隔</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' and '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// string and number and symbol and boolean and null and underfind and object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、array-toString"><a href="#2、array-toString" class="headerlink" title="2、array.toString()"></a>2、array.toString()</h5><p>默认以逗号分隔</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 数组转换为字符串</span>var arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// array.toString()</span><span class="token comment" spellcheck="true">// toString() 把数组转换为字符串，并返回结果。（数组的所有值用逗号隔开）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1,2,3,4</span>var arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'symbol'</span><span class="token punctuation">,</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span> <span class="token string">'null'</span><span class="token punctuation">,</span> <span class="token string">'underfind'</span><span class="token punctuation">,</span> <span class="token string">'object'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// string,number,symbol,boolean,null,underfind,object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、String"><a href="#3、String" class="headerlink" title="3、String()"></a>3、String()</h5><p>JavaScript 全局函数  String() 把对象的值转换为字符串（String() 函数返回与字符串对象的toString()方法值一样）</p><pre class="line-numbers language-c"><code class="language-c"> <span class="token comment" spellcheck="true">// 数组转换为字符串</span>var arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>var arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'symbol'</span><span class="token punctuation">,</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span> <span class="token string">'null'</span><span class="token punctuation">,</span> <span class="token string">'underfind'</span><span class="token punctuation">,</span> <span class="token string">'object'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// String() 函数把对象的值转换为字符串</span><span class="token comment" spellcheck="true">// String(object)</span><span class="token comment" spellcheck="true">// object 必需，JavaScript 对象</span><span class="token comment" spellcheck="true">// String() 函数返回与字符串对象的toString()方法值一样</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1,2,3,4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// string,number,symbol,boolean,null,underfind,object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、字符串转数组"><a href="#二、字符串转数组" class="headerlink" title="二、字符串转数组"></a>二、字符串转数组</h4><h5 id="1、string-split-separator-limit"><a href="#1、string-split-separator-limit" class="headerlink" title="1、string.split(separator,limit)"></a>1、string.split(separator,limit)</h5><p>split() 方法用于把一个字符串分割成字符串数组</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 字符串转换为数组</span><span class="token comment" spellcheck="true">// string.split(separator,limit)</span><span class="token comment" spellcheck="true">// separator 可选，字符串或正则表达式，从该参数指定的地方分割 string Object</span><span class="token comment" spellcheck="true">// limit 可选，该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度</span>var str1 <span class="token operator">=</span> <span class="token string">'hello world'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['hello world']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']</span><span class="token comment" spellcheck="true">// 以空格分隔</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['hello', 'world']</span><span class="token comment" spellcheck="true">// 以空格分隔，且返回数组长度为 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['hello']</span><span class="token comment" spellcheck="true">// 以 l 分隔</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['he', '', 'o wor', 'd']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、Array-from-object-mapFunction-thisValue"><a href="#2、Array-from-object-mapFunction-thisValue" class="headerlink" title="2、Array.from(object, mapFunction, thisValue)"></a>2、Array.from(object, mapFunction, thisValue)</h5><p>from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组（字符串、数组的对象属性）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 字符串转换为数组</span>var str1 <span class="token operator">=</span> <span class="token string">'hello the new world'</span><span class="token comment" spellcheck="true">// Array.from(object, mapFunction, thisValue)</span><span class="token comment" spellcheck="true">// object 必需，要转换为数组的对象</span><span class="token comment" spellcheck="true">// mapFunction 可选，数组中每个元素要调用的函数</span><span class="token comment" spellcheck="true">// thisValue 可选，映射函数(mapFunction)中的 this 对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 19</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["h", "e", "l", "l", "o", " ", "t", "h", "e", " ", "n", "e", "w", " ", "w", "o", "r", "l", "d"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、展开运算符及解构赋值"><a href="#3、展开运算符及解构赋值" class="headerlink" title="3、展开运算符及解构赋值"></a>3、展开运算符及解构赋值</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 字符串转换为数组</span>var str1 <span class="token operator">=</span> <span class="token string">'hello the new world'</span><span class="token comment" spellcheck="true">// 展开运算符允许在需要多个元素（如数组文字）的地方扩展诸如字符串之类的可迭代对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>str1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']</span><span class="token comment" spellcheck="true">// 解构赋值</span><span class="token comment" spellcheck="true">// 解构赋值语法可以将数组或可迭代对象中的值解包为不同的变量</span>var <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>str2<span class="token punctuation">]</span> <span class="token operator">=</span> str1console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vue2.js框架复写Hexo的hexo-theme-matery主题</title>
      <link href="/2022/09/13/shi-yong-vue2-js-kuang-jia-fu-xie-hexo-de-hexo-theme-matery-zhu-ti/"/>
      <url>/2022/09/13/shi-yong-vue2-js-kuang-jia-fu-xie-hexo-de-hexo-theme-matery-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><h3 id="二、项目基本配置"><a href="#二、项目基本配置" class="headerlink" title="二、项目基本配置"></a>二、项目基本配置</h3><p>[^主要包括框架、UI组件库的选型及相关插件的运用。]: </p><h4 id="1、框架"><a href="#1、框架" class="headerlink" title="1、框架"></a>1、框架</h4><h5 id="1-1-Vue2-js"><a href="#1-1-Vue2-js" class="headerlink" title="1.1    Vue2.js"></a><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">1.1    Vue2.js</a></h5><h4 id="2、UI组件库"><a href="#2、UI组件库" class="headerlink" title="2、UI组件库"></a>2、UI组件库</h4><h5 id="2-1-AT-UI"><a href="#2-1-AT-UI" class="headerlink" title="2.1    AT UI"></a><a href="https://at-ui.github.io/at-ui/#/zh" target="_blank" rel="noopener">2.1    AT UI</a></h5><h5 id="2-2-iView-UI"><a href="#2-2-iView-UI" class="headerlink" title="2.2    iView UI"></a><a href="https://v4.iviewui.com/" target="_blank" rel="noopener">2.2    iView UI</a></h5><h5 id="2-3-Element-UI"><a href="#2-3-Element-UI" class="headerlink" title="2.3    Element UI"></a><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">2.3    Element UI</a></h5><h4 id="3、插件"><a href="#3、插件" class="headerlink" title="3、插件"></a>3、插件</h4><h5 id="3-1-Axios"><a href="#3-1-Axios" class="headerlink" title="3.1    Axios"></a><a href="http://www.axios-js.com/" target="_blank" rel="noopener">3.1    Axios</a></h5><h5 id="3-2-Vue-Router"><a href="#3-2-Vue-Router" class="headerlink" title="3.2    Vue-Router"></a><a href="https://v3.router.vuejs.org/" target="_blank" rel="noopener">3.2    Vue-Router</a></h5><h5 id="3-3-Vue-lazyload"><a href="#3-3-Vue-lazyload" class="headerlink" title="3.3    Vue-lazyload"></a><a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">3.3    Vue-lazyload</a></h5><h5 id="3-4-particles-bg-vue"><a href="#3-4-particles-bg-vue" class="headerlink" title="3.4    particles-bg-vue"></a><a href="https://github.com/lindelof/particles-bg-vue" target="_blank" rel="noopener">3.4    particles-bg-vue</a></h5><h5 id="3-5-Vue-wechat-title"><a href="#3-5-Vue-wechat-title" class="headerlink" title="3.5    Vue-wechat-title"></a><a href="https://github.com/deboyblog/vue-wechat-title" target="_blank" rel="noopener">3.5    Vue-wechat-title</a></h5><h5 id="3-6-mavon-editor"><a href="#3-6-mavon-editor" class="headerlink" title="3.6    mavon-editor"></a><a href="https://github.com/hinesboy/mavonEditor" target="_blank" rel="noopener">3.6    mavon-editor</a></h5><h5 id="3-7-aplayer"><a href="#3-7-aplayer" class="headerlink" title="3.7    aplayer"></a><a href="https://github.com/DIYgod/APlayer" target="_blank" rel="noopener">3.7    aplayer</a></h5><p>参考Hexo中hexo-theme-matery的主题，引用了该插件（当然更多的是为了尽可能还原，哈哈哈）。</p><h6 id="3-7-1-安装"><a href="#3-7-1-安装" class="headerlink" title="3.7.1  安装"></a>3.7.1  安装</h6><pre><code>npm install aplayer --save</code></pre><h6 id="3-7-2-引入"><a href="#3-7-2-引入" class="headerlink" title="3.7.2  引入"></a>3.7.2  引入</h6><pre><code>import APlayer from 'aplayer'import 'aplayer/dist/APlayer.min.css'</code></pre><h6 id="3-7-3-初始化数据及页面"><a href="#3-7-3-初始化数据及页面" class="headerlink" title="3.7.3  初始化数据及页面"></a>3.7.3  初始化数据及页面</h6><p>使用（这里使用了AT UI中的“at-card”组件，指定其id名为“aplayer”，即在这个组件上进行Aplayer的初始化）</p><pre><code>&lt;div class="col-md-21"&gt;    &lt;at-card id="aplayer"&gt;&lt;/at-card&gt;&lt;/div&gt;</code></pre><p>data中定义接收歌单的对象数组以及播放器的基本配置</p><pre><code>data() {    return {        timer: null,        audio: [],        info: {            fixed: false, // 不开启吸底模式            listFolded: false, // 折叠歌曲列表            autoplay: false, // 开启自动播放            preload: "auto", // 自动预加载歌曲            loop: "all", // 播放循环模式、all全部循环 one单曲循环 none只播放一次            order: "list", //  播放模式，list列表播放, random随机播放            lrcType: 1,            mutex: "true",            listMaxHeight: '197px'        },    }},</code></pre><p>相关参数</p><table><thead><tr><th>名称</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>container</td><td>document.querySelector(‘.aplayer’)</td><td>播放器容器元素</td></tr><tr><td>fixed</td><td>false</td><td>开启吸底模式, <a href="https://aplayer.js.org/#/home?id=fixed-mode" target="_blank" rel="noopener">详情</a></td></tr><tr><td>mini</td><td>false</td><td>开启迷你模式, <a href="https://aplayer.js.org/#/home?id=mini-mode" target="_blank" rel="noopener">详情</a></td></tr><tr><td>autoplay</td><td>false</td><td>音频自动播放</td></tr><tr><td>theme</td><td>‘#b7daff’</td><td>主题色</td></tr><tr><td>loop</td><td>‘all’</td><td>音频循环播放, 可选值: ‘all’, ‘one’, ‘none’</td></tr><tr><td>order</td><td>‘list’</td><td>音频循环顺序, 可选值: ‘list’, ‘random’</td></tr><tr><td>preload</td><td>‘auto’</td><td>预加载，可选值: ‘none’, ‘metadata’, ‘auto’</td></tr><tr><td>volume</td><td>0.7</td><td>默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</td></tr><tr><td>audio</td><td>-</td><td>音频信息, 应该是一个对象或对象数组</td></tr><tr><td>audio.name</td><td>-</td><td>音频名称</td></tr><tr><td>audio.artist</td><td>-</td><td>音频艺术家</td></tr><tr><td>audio.url</td><td>-</td><td>音频链接</td></tr><tr><td>audio.cover</td><td>-</td><td>音频封面</td></tr><tr><td>audio.lrc</td><td>-</td><td><a href="https://aplayer.js.org/#/home?id=lrc" target="_blank" rel="noopener">详情</a></td></tr><tr><td>audio.theme</td><td>-</td><td>切换到此音频时的主题色，比上面的 theme 优先级高</td></tr><tr><td>audio.type</td><td>‘auto’</td><td>可选值: ‘auto’, ‘hls’, ‘normal’ 或其他自定义类型, <a href="https://aplayer.js.org/#/home?id=mse-support" target="_blank" rel="noopener">详情</a></td></tr><tr><td>customAudioType</td><td>-</td><td>自定义类型，<a href="https://aplayer.js.org/#/home?id=mse-support" target="_blank" rel="noopener">详情</a></td></tr><tr><td>mutex</td><td>true</td><td>互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</td></tr><tr><td>lrcType</td><td>0</td><td><a href="https://aplayer.js.org/#/home?id=lrc" target="_blank" rel="noopener">详情</a></td></tr><tr><td>listFolded</td><td>false</td><td>列表默认折叠</td></tr><tr><td>listMaxHeight</td><td>-</td><td>列表最大高度</td></tr><tr><td>storageName</td><td>‘aplayer-setting’</td><td>存储播放器设置的 localStorage key</td></tr></tbody></table><p>在methods中写入初始化以及获取歌单数据的方法，因为数据来源是动态的，页面需动态操作Dom，所以我们需在mounted中去触发initAudio()的方法</p><pre><code>methods: {      initAudio() {    // 创建一个音乐播放器实例，并挂载到DOM上，同时进行相关配置    const ap = new APlayer({    container: document.getElementById("aplayer"),    audio: this.audio, // 音乐信息     ...this.info, // 其他配置信息    });    console.log(this.audio.length)    window.clearInterval(this.timer)    this.timer = null    },    // 获取歌单数据    async getAudio() {        const {        data: res        } = await this.$http.get('bgm/allList')        console.log(res)        this.audio = res.list        console.log(this.audio)    },}</code></pre><p>在created中，触发获取歌单数据的方法</p><pre><code>created() {    this.getAudio()},</code></pre><p>初始化播放器时，需将数据先准备好，上述两个方法一个在mounted中触发，一个在created中触发，前者先于后者，因此此处触发需做一个延时的判断，数据获取到后，我们再初始化</p><pre><code>mounted() {    this.timer = setInterval(() =&gt; {        if (this.audio == undefined || this.audio == null || this.audio.length &lt;= 0) {            console.log('this.audio 为空！')        } else {            this.initAudio()        }    }, 1000)}</code></pre><p><a href="https://aplayer.js.org/#/zh-Hans/" target="_blank" rel="noopener">中文参考文档</a></p><h5 id="3-8-json-bigint"><a href="#3-8-json-bigint" class="headerlink" title="3.8    json-bigint"></a><a href="https://github.com/sidorares/json-bigint" target="_blank" rel="noopener">3.8    json-bigint</a></h5><h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><h3 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2.js </tag>
            
            <tag> Hexo </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用网站、工具等推荐</title>
      <link href="/2022/07/31/chang-yong-wang-zhan-gong-ju-deng-tui-jian/"/>
      <url>/2022/07/31/chang-yong-wang-zhan-gong-ju-deng-tui-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="压缩工具"><a href="#压缩工具" class="headerlink" title="压缩工具"></a>压缩工具</h4><ol><li><a href="https://tinypng.com/" target="_blank" rel="noopener">iLoveIMG | 图像文件在线编辑工具</a></li><li><a href="https://www.iloveimg.com/zh-cn" target="_blank" rel="noopener">TinyPNG – Compress WebP, PNG and JPEG images intelligently</a></li></ol><h4 id="开源免费API"><a href="#开源免费API" class="headerlink" title="开源免费API"></a>开源免费API</h4><ol><li><a href="https://api.oioweb.cn/" target="_blank" rel="noopener">教书先生API - 提供免费接口调用平台</a></li></ol><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><ol><li><a href="https://www.staticfile.org/" target="_blank" rel="noopener">Staticfile CDN</a></li><li><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr - A free, fast, and reliable CDN for JS and open source</a></li></ol><h4 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h4><ol><li><a href="https://yiyan.baidu.com/" target="_blank" rel="noopener">文心一言</a></li></ol><h4 id="IPV6相关"><a href="#IPV6相关" class="headerlink" title="IPV6相关"></a>IPV6相关</h4><ol><li><a href="https://www.china-ipv6.cn/#/checkTools" target="_blank" rel="noopener">国家IPv6发展监测平台</a></li><li><a href="https://ipw.cn/ipv6webcheck/" target="_blank" rel="noopener">IPv6网站测试|检测|检查 | IP查询(ipw.cn)</a></li></ol><h4 id="前端开发手册"><a href="#前端开发手册" class="headerlink" title="前端开发手册"></a>前端开发手册</h4><ol><li><a href="https://www.w3school.com.cn/tags/index.asp" target="_blank" rel="noopener">HTML 标签参考手册</a></li><li><a href="https://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="noopener">CSS 参考手册</a></li></ol><h4 id="前端开源项目"><a href="#前端开源项目" class="headerlink" title="前端开源项目"></a>前端开源项目</h4><ol><li><p>新蜂商城</p><ol><li><a href="https://github.com/newbee-ltd/newbee-mall-vue-app" target="_blank" rel="noopener">Vue2 全家桶 + Vant 搭建大型单页面商城项目</a></li><li><a href="https://github.com/newbee-ltd/vue3-admin" target="_blank" rel="noopener">Vue 3 + Vite 2 + Vue-Router 4 + Element-Plus + Echarts 5 + Axios 开发的后台管理系统</a></li><li><a href="https://github.com/newbee-ltd/newbee-mall-vue3-app" target="_blank" rel="noopener">Vue3 全家桶 + Vant 搭建大型单页面商城项目，新蜂商城 Vue3.2 版本，技术栈为 Vue3.2 + Vue-Router4.x + Pinia + Vant4.x</a></li><li><a href="https://github.com/newbee-ltd/newbee-mall-api" target="_blank" rel="noopener">新蜂商城前后端分离版本-后端API源码</a></li></ol></li><li><p><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/" target="_blank" rel="noopener">vue-element-admin</a></p><ol><li><a href="https://panjiachen.github.io/vue-admin-template" target="_blank" rel="noopener">Vue Element Admin Demo 简易版</a></li><li><a href="https://panjiachen.github.io/vue-element-admin" target="_blank" rel="noopener">Vue Element Admin Demo</a></li></ol></li></ol><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li><a href="https://www.ilovepdf.com/zh-cn" target="_blank" rel="noopener">iLovePDF | 为PDF爱好者提供的PDF文件在线处理工具</a></li><li><a href="https://www.grabient.com/" target="_blank" rel="noopener">Grabient | 提供了很多很不错的渐变色方案</a></li><li><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsdelivr | 一个免费开源的 CDN 解决方案</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发手册 </tag>
            
            <tag> 压缩工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
